
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\004\000\002\053\003\000\002\002" +
    "\004\000\002\002\003\000\002\003\003\000\002\003\003" +
    "\000\002\005\007\000\002\005\010\000\002\004\003\000" +
    "\002\004\003\000\002\007\012\000\002\007\011\000\002" +
    "\011\003\000\002\011\005\000\002\013\004\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\010\004\000\002\010\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\004\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\004\000\002\015\007\000\002" +
    "\015\005\000\002\017\003\000\002\017\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\004\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\007\000\002\020\005\000\002\020\005\000\002\020\004" +
    "\000\002\020\005\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\016\006\000\002\022\006\000\002" +
    "\023\004\000\002\023\004\000\002\026\015\000\002\026" +
    "\022\000\002\026\011\000\002\026\013\000\002\024\005" +
    "\000\002\025\003\000\002\025\005\000\002\027\006\000" +
    "\002\027\006\000\002\030\006\000\002\031\011\000\002" +
    "\031\015\000\002\031\013\000\002\032\012\000\002\032" +
    "\011\000\002\032\011\000\002\041\004\000\002\041\003" +
    "\000\002\033\006\000\002\034\005\000\002\035\011\000" +
    "\002\036\014\000\002\036\014\000\002\037\013\000\002" +
    "\040\004\000\002\042\004\000\002\043\004\000\002\043" +
    "\005\000\002\006\012\000\002\006\011\000\002\044\006" +
    "\000\002\044\005\000\002\045\005\000\002\045\003\000" +
    "\002\046\007\000\002\047\007\000\002\050\007\000\002" +
    "\051\007\000\002\052\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0127\000\020\040\006\041\012\042\022\045\016\046" +
    "\021\063\010\070\014\001\002\000\004\002\u0129\001\002" +
    "\000\022\002\ufffe\040\ufffe\041\ufffe\042\ufffe\045\ufffe\046" +
    "\ufffe\063\ufffe\070\ufffe\001\002\000\010\005\ufff2\033\ufff2" +
    "\073\ufff2\001\002\000\022\002\000\040\006\041\012\042" +
    "\022\045\016\046\021\063\010\070\014\001\002\000\004" +
    "\073\u011d\001\002\000\022\002\ufff9\040\ufff9\041\ufff9\042" +
    "\ufff9\045\ufff9\046\ufff9\063\ufff9\070\ufff9\001\002\000\010" +
    "\005\ufff1\033\ufff1\073\ufff1\001\002\000\022\002\ufffd\040" +
    "\ufffd\041\ufffd\042\ufffd\045\ufffd\046\ufffd\063\ufffd\070\ufffd" +
    "\001\002\000\004\073\u0116\001\002\000\022\002\ufffc\040" +
    "\ufffc\041\ufffc\042\ufffc\045\ufffc\046\ufffc\063\ufffc\070\ufffc" +
    "\001\002\000\010\005\uffef\033\uffef\073\uffef\001\002\000" +
    "\022\002\ufff8\040\ufff8\041\ufff8\042\ufff8\045\ufff8\046\ufff8" +
    "\063\ufff8\070\ufff8\001\002\000\004\073\023\001\002\000" +
    "\010\005\uffee\033\uffee\073\uffee\001\002\000\010\005\ufff0" +
    "\033\ufff0\073\ufff0\001\002\000\004\004\024\001\002\000" +
    "\016\005\025\040\006\041\012\042\022\045\016\046\021" +
    "\001\002\000\004\006\u0113\001\002\000\006\005\ufff5\024" +
    "\ufff5\001\002\000\004\073\u0112\001\002\000\006\005\031" +
    "\024\032\001\002\000\004\006\034\001\002\000\014\040" +
    "\006\041\012\042\022\045\016\046\021\001\002\000\006" +
    "\005\ufff4\024\ufff4\001\002\000\040\040\006\041\012\042" +
    "\022\045\016\046\021\047\035\051\063\052\043\055\047" +
    "\056\041\057\050\060\066\061\045\062\052\073\051\001" +
    "\002\000\004\004\u0107\001\002\000\042\007\u0106\040\006" +
    "\041\012\042\022\045\016\046\021\047\035\051\063\052" +
    "\043\055\047\056\041\057\050\060\066\061\045\062\052" +
    "\073\051\001\002\000\046\007\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\045\uffe5\046\uffe5\047\uffe5\051\uffe5\052\uffe5\053\uffe5" +
    "\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062" +
    "\uffe5\073\uffe5\001\002\000\004\073\354\001\002\000\004" +
    "\004\320\001\002\000\046\007\uffe2\040\uffe2\041\uffe2\042" +
    "\uffe2\045\uffe2\046\uffe2\047\uffe2\051\uffe2\052\uffe2\053\uffe2" +
    "\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062" +
    "\uffe2\073\uffe2\001\002\000\004\004\275\001\002\000\004" +
    "\010\274\001\002\000\004\010\273\001\002\000\046\007" +
    "\uffec\040\uffec\041\uffec\042\uffec\045\uffec\046\uffec\047\uffec" +
    "\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057" +
    "\uffec\060\uffec\061\uffec\062\uffec\073\uffec\001\002\000\004" +
    "\004\265\001\002\000\004\006\254\001\002\000\014\004" +
    "\211\016\251\026\247\027\250\033\210\001\002\000\042" +
    "\004\116\010\244\013\100\032\112\033\121\043\120\044" +
    "\124\064\107\065\115\066\114\067\110\072\122\073\111" +
    "\074\101\075\104\076\075\001\002\000\004\010\243\001" +
    "\002\000\046\007\uffe8\040\uffe8\041\uffe8\042\uffe8\045\uffe8" +
    "\046\uffe8\047\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055" +
    "\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\073\uffe8" +
    "\001\002\000\046\007\uffe1\040\uffe1\041\uffe1\042\uffe1\045" +
    "\uffe1\046\uffe1\047\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1" +
    "\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\073" +
    "\uffe1\001\002\000\046\007\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\045\uffe0\046\uffe0\047\uffe0\051\uffe0\052\uffe0\053\uffe0\054" +
    "\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0" +
    "\073\uffe0\001\002\000\046\007\uffe6\040\uffe6\041\uffe6\042" +
    "\uffe6\045\uffe6\046\uffe6\047\uffe6\051\uffe6\052\uffe6\053\uffe6" +
    "\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062" +
    "\uffe6\073\uffe6\001\002\000\046\007\uffe4\040\uffe4\041\uffe4" +
    "\042\uffe4\045\uffe4\046\uffe4\047\uffe4\051\uffe4\052\uffe4\053" +
    "\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4" +
    "\062\uffe4\073\uffe4\001\002\000\046\007\uffe3\040\uffe3\041" +
    "\uffe3\042\uffe3\045\uffe3\046\uffe3\047\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061" +
    "\uffe3\062\uffe3\073\uffe3\001\002\000\046\007\uffde\040\uffde" +
    "\041\uffde\042\uffde\045\uffde\046\uffde\047\uffde\051\uffde\052" +
    "\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde" +
    "\061\uffde\062\uffde\073\uffde\001\002\000\004\004\237\001" +
    "\002\000\046\007\uffe7\040\uffe7\041\uffe7\042\uffe7\045\uffe7" +
    "\046\uffe7\047\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055" +
    "\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\073\uffe7" +
    "\001\002\000\046\007\uffea\040\uffea\041\uffea\042\uffea\045" +
    "\uffea\046\uffea\047\uffea\051\uffea\052\uffea\053\uffea\054\uffea" +
    "\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea\062\uffea\073" +
    "\uffea\001\002\000\004\010\236\001\002\000\046\007\uffeb" +
    "\040\uffeb\041\uffeb\042\uffeb\045\uffeb\046\uffeb\047\uffeb\051" +
    "\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb" +
    "\060\uffeb\061\uffeb\062\uffeb\073\uffeb\001\002\000\006\016" +
    "\073\033\072\001\002\000\046\007\uffdf\040\uffdf\041\uffdf" +
    "\042\uffdf\045\uffdf\046\uffdf\047\uffdf\051\uffdf\052\uffdf\053" +
    "\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf" +
    "\062\uffdf\073\uffdf\001\002\000\040\004\116\013\100\032" +
    "\112\033\121\043\120\044\124\064\107\065\115\066\114" +
    "\067\110\072\122\073\111\074\101\075\104\076\075\001" +
    "\002\000\040\004\116\013\100\032\112\033\121\043\120" +
    "\044\124\064\107\065\115\066\114\067\110\072\122\073" +
    "\111\074\101\075\104\076\075\001\002\000\052\005\uffbf" +
    "\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\017" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\030\uffbf\031\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\001" +
    "\002\000\052\005\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9" +
    "\014\uffb9\015\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\030\uffb9\031\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\037\uffb9\001\002\000\052\005\uffc0\010\uffc0\011" +
    "\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\017\uffc0\020\uffc0" +
    "\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\030\uffc0\031" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\001\002\000\052" +
    "\005\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\030\uffc5\031\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\001\002\000\040\004\116\013\100\032\112\033\121" +
    "\043\120\044\124\064\107\065\115\066\114\067\110\072" +
    "\122\073\111\074\101\075\104\076\075\001\002\000\052" +
    "\005\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\025\uffbb\030\uffbb\031\uffbb\034\uffbb\035\uffbb\036\uffbb\037" +
    "\uffbb\001\002\000\052\005\uffc2\010\uffc2\011\uffc2\012\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\017\uffc2\020\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\030\uffc2\031\uffc2\034\uffc2" +
    "\035\uffc2\036\uffc2\037\uffc2\001\002\000\052\005\uffc1\010" +
    "\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\017\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\030" +
    "\uffc1\031\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\001\002" +
    "\000\052\005\uffba\010\uffba\011\uffba\012\uffba\013\uffba\014" +
    "\uffba\015\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba" +
    "\024\uffba\025\uffba\030\uffba\031\uffba\034\uffba\035\uffba\036" +
    "\uffba\037\uffba\001\002\000\042\010\232\011\137\012\142" +
    "\013\141\014\146\015\140\017\150\020\143\021\144\022" +
    "\134\023\147\025\135\030\132\031\133\036\136\037\145" +
    "\001\002\000\052\005\uffc6\010\uffc6\011\uffc6\012\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\030\uffc6\031\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\037\uffc6\001\002\000\004\004\226\001\002" +
    "\000\004\004\222\001\002\000\056\004\211\005\uffbd\010" +
    "\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\030" +
    "\uffbd\031\uffbd\033\210\034\uffbd\035\uffbd\036\uffbd\037\uffbd" +
    "\001\002\000\040\004\116\013\100\032\112\033\121\043" +
    "\120\044\124\064\107\065\115\066\114\067\110\072\122" +
    "\073\111\074\101\075\104\076\075\001\002\000\052\005" +
    "\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\030\uffbe\031\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe" +
    "\001\002\000\004\004\203\001\002\000\004\004\177\001" +
    "\002\000\052\004\116\013\100\032\112\033\121\040\006" +
    "\041\012\042\022\043\120\044\124\045\016\046\021\064" +
    "\107\065\115\066\114\067\110\072\122\073\111\074\101" +
    "\075\104\076\075\001\002\000\052\005\uffc3\010\uffc3\011" +
    "\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\030\uffc3\031" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\001\002\000\052" +
    "\005\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\030\uffb8\031\uffb8\034\uffb8\035\uffb8\036\uffb8\037" +
    "\uffb8\001\002\000\040\004\116\013\100\032\112\033\121" +
    "\043\120\044\124\064\107\065\115\066\114\067\110\072" +
    "\122\073\111\074\101\075\104\076\075\001\002\000\052" +
    "\005\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\030\uffbc\031\uffbc\034\uffbc\035\uffbc\036\uffbc\037" +
    "\uffbc\001\002\000\054\005\uffc4\010\uffc4\011\uffc4\012\uffc4" +
    "\013\uffc4\014\uffc4\015\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\030\uffc4\031\uffc4\033\072" +
    "\034\uffc4\035\uffc4\036\uffc4\037\uffc4\001\002\000\052\005" +
    "\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7" +
    "\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\030\uffb7\031\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7" +
    "\001\002\000\044\011\137\012\142\013\141\014\146\015" +
    "\140\017\150\020\143\021\144\022\134\023\147\024\uffad" +
    "\025\135\030\132\031\133\034\uffad\036\136\037\145\001" +
    "\002\000\006\024\130\034\127\001\002\000\052\005\uffae" +
    "\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae\017" +
    "\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae" +
    "\030\uffae\031\uffae\034\uffae\035\uffae\036\uffae\037\uffae\001" +
    "\002\000\040\004\116\013\100\032\112\033\121\043\120" +
    "\044\124\064\107\065\115\066\114\067\110\072\122\073" +
    "\111\074\101\075\104\076\075\001\002\000\044\011\137" +
    "\012\142\013\141\014\146\015\140\017\150\020\143\021" +
    "\144\022\134\023\147\024\uffac\025\135\030\132\031\133" +
    "\034\uffac\036\136\037\145\001\002\000\040\004\116\013" +
    "\100\032\112\033\121\043\120\044\124\064\107\065\115" +
    "\066\114\067\110\072\122\073\111\074\101\075\104\076" +
    "\075\001\002\000\040\004\116\013\100\032\112\033\121" +
    "\043\120\044\124\064\107\065\115\066\114\067\110\072" +
    "\122\073\111\074\101\075\104\076\075\001\002\000\040" +
    "\004\116\013\100\032\112\033\121\043\120\044\124\064" +
    "\107\065\115\066\114\067\110\072\122\073\111\074\101" +
    "\075\104\076\075\001\002\000\040\004\116\013\100\032" +
    "\112\033\121\043\120\044\124\064\107\065\115\066\114" +
    "\067\110\072\122\073\111\074\101\075\104\076\075\001" +
    "\002\000\040\004\116\013\100\032\112\033\121\043\120" +
    "\044\124\064\107\065\115\066\114\067\110\072\122\073" +
    "\111\074\101\075\104\076\075\001\002\000\040\004\116" +
    "\013\100\032\112\033\121\043\120\044\124\064\107\065" +
    "\115\066\114\067\110\072\122\073\111\074\101\075\104" +
    "\076\075\001\002\000\040\004\116\013\100\032\112\033" +
    "\121\043\120\044\124\064\107\065\115\066\114\067\110" +
    "\072\122\073\111\074\101\075\104\076\075\001\002\000" +
    "\040\004\116\013\100\032\112\033\121\043\120\044\124" +
    "\064\107\065\115\066\114\067\110\072\122\073\111\074" +
    "\101\075\104\076\075\001\002\000\040\004\116\013\100" +
    "\032\112\033\121\043\120\044\124\064\107\065\115\066" +
    "\114\067\110\072\122\073\111\074\101\075\104\076\075" +
    "\001\002\000\040\004\116\013\100\032\112\033\121\043" +
    "\120\044\124\064\107\065\115\066\114\067\110\072\122" +
    "\073\111\074\101\075\104\076\075\001\002\000\040\004" +
    "\116\013\100\032\112\033\121\043\120\044\124\064\107" +
    "\065\115\066\114\067\110\072\122\073\111\074\101\075" +
    "\104\076\075\001\002\000\040\004\116\013\100\032\112" +
    "\033\121\043\120\044\124\064\107\065\115\066\114\067" +
    "\110\072\122\073\111\074\101\075\104\076\075\001\002" +
    "\000\040\004\116\013\100\032\112\033\121\043\120\044" +
    "\124\064\107\065\115\066\114\067\110\072\122\073\111" +
    "\074\101\075\104\076\075\001\002\000\040\004\116\013" +
    "\100\032\112\033\121\043\120\044\124\064\107\065\115" +
    "\066\114\067\110\072\122\073\111\074\101\075\104\076" +
    "\075\001\002\000\040\004\116\013\100\032\112\033\121" +
    "\043\120\044\124\064\107\065\115\066\114\067\110\072" +
    "\122\073\111\074\101\075\104\076\075\001\002\000\052" +
    "\005\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015" +
    "\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd" +
    "\025\uffcd\030\132\031\133\034\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\001\002\000\052\005\uffd1\010\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\015\uffd1\017\uffd1\020\uffd1\021\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\025\uffd1\030\132\031\133\034\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\001\002\000\052\005\uffd5\010" +
    "\uffd5\011\uffd5\012\142\013\141\014\uffd5\015\140\017\150" +
    "\020\143\021\144\022\134\023\147\024\uffd5\025\135\030" +
    "\132\031\133\034\uffd5\035\uffd5\036\uffd5\037\uffd5\001\002" +
    "\000\042\011\137\012\142\013\141\014\146\015\140\017" +
    "\150\020\143\021\144\022\134\023\147\025\135\030\132" +
    "\031\133\035\155\036\136\037\145\001\002\000\040\004" +
    "\116\013\100\032\112\033\121\043\120\044\124\064\107" +
    "\065\115\066\114\067\110\072\122\073\111\074\101\075" +
    "\104\076\075\001\002\000\052\005\uffcb\010\uffcb\011\137" +
    "\012\142\013\141\014\146\015\140\017\150\020\143\021" +
    "\144\022\134\023\147\024\uffcb\025\135\030\132\031\133" +
    "\034\uffcb\035\uffcb\036\136\037\145\001\002\000\052\005" +
    "\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\030\132\031\133\034\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\001\002\000\052\005\uffcf\010\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\030\132\031\133\034\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\001\002\000\052\005\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\140\017\150\020" +
    "\143\021\144\022\134\023\147\024\uffd8\025\135\030\132" +
    "\031\133\034\uffd8\035\uffd8\036\uffd8\037\uffd8\001\002\000" +
    "\052\005\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\015\140\017\150\020\143\021\144\022\134\023\147\024" +
    "\uffd7\025\135\030\132\031\133\034\uffd7\035\uffd7\036\uffd7" +
    "\037\uffd7\001\002\000\052\005\uffd3\010\uffd3\011\uffd3\012" +
    "\uffd3\013\uffd3\014\uffd3\015\140\017\150\020\143\021\144" +
    "\022\134\023\147\024\uffd3\025\135\030\132\031\133\034" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\001\002\000\052\005\uffd6" +
    "\010\uffd6\011\uffd6\012\142\013\141\014\uffd6\015\140\017" +
    "\150\020\143\021\144\022\134\023\147\024\uffd6\025\135" +
    "\030\132\031\133\034\uffd6\035\uffd6\036\uffd6\037\uffd6\001" +
    "\002\000\050\005\uffd4\010\uffd4\011\137\012\142\013\141" +
    "\014\146\015\140\017\150\020\143\021\144\022\134\023" +
    "\147\024\uffd4\025\135\030\132\031\133\034\uffd4\035\uffd4" +
    "\037\uffd4\001\002\000\052\005\uffd0\010\uffd0\011\uffd0\012" +
    "\uffd0\013\uffd0\014\uffd0\015\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\024\uffd0\025\uffd0\030\132\031\133\034" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\001\002\000\052\005\uffce" +
    "\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\017" +
    "\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\030\132\031\133\034\uffce\035\uffce\036\uffce\037\uffce\001" +
    "\002\000\052\005\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9" +
    "\014\uffc9\015\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\030\132\031\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\001\002\000\052\005\uffca\010\uffca\011" +
    "\uffca\012\uffca\013\uffca\014\uffca\015\uffca\017\uffca\020\uffca" +
    "\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\030\uffca\031" +
    "\uffca\034\uffca\035\uffca\036\uffca\037\uffca\001\002\000\004" +
    "\005\175\001\002\000\042\005\174\011\137\012\142\013" +
    "\141\014\146\015\140\017\150\020\143\021\144\022\134" +
    "\023\147\025\135\030\132\031\133\036\136\037\145\001" +
    "\002\000\052\005\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7" +
    "\014\uffc7\015\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\030\uffc7\031\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\001\002\000\040\004\116\013\100\032" +
    "\112\033\121\043\120\044\124\064\107\065\115\066\114" +
    "\067\110\072\122\073\111\074\101\075\104\076\075\001" +
    "\002\000\052\005\uffb5\010\uffb5\011\137\012\142\013\141" +
    "\014\146\015\140\017\150\020\143\021\144\022\134\023" +
    "\147\024\uffb5\025\135\030\132\031\133\034\uffb5\035\uffb5" +
    "\036\136\037\145\001\002\000\040\004\116\013\100\032" +
    "\112\033\121\043\120\044\124\064\107\065\115\066\114" +
    "\067\110\072\122\073\111\074\101\075\104\076\075\001" +
    "\002\000\042\005\201\011\137\012\142\013\141\014\146" +
    "\015\140\017\150\020\143\021\144\022\134\023\147\025" +
    "\135\030\132\031\133\036\136\037\145\001\002\000\004" +
    "\010\202\001\002\000\052\005\uff8d\010\uff8d\011\uff8d\012" +
    "\uff8d\013\uff8d\014\uff8d\015\uff8d\017\uff8d\020\uff8d\021\uff8d" +
    "\022\uff8d\023\uff8d\024\uff8d\025\uff8d\030\uff8d\031\uff8d\034" +
    "\uff8d\035\uff8d\036\uff8d\037\uff8d\001\002\000\040\004\116" +
    "\013\100\032\112\033\121\043\120\044\124\064\107\065" +
    "\115\066\114\067\110\072\122\073\111\074\101\075\104" +
    "\076\075\001\002\000\042\005\205\011\137\012\142\013" +
    "\141\014\146\015\140\017\150\020\143\021\144\022\134" +
    "\023\147\025\135\030\132\031\133\036\136\037\145\001" +
    "\002\000\004\010\206\001\002\000\052\005\uff8c\010\uff8c" +
    "\011\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c\017\uff8c\020" +
    "\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\030\uff8c" +
    "\031\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\001\002\000" +
    "\052\005\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\015\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\030\132\031\133\034\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\001\002\000\040\004\116\013\100\032\112\033" +
    "\121\043\120\044\124\064\107\065\115\066\114\067\110" +
    "\072\122\073\111\074\101\075\104\076\075\001\002\000" +
    "\042\004\116\005\214\013\100\032\112\033\121\043\120" +
    "\044\124\064\107\065\115\066\114\067\110\072\122\073" +
    "\111\074\101\075\104\076\075\001\002\000\044\005\uff91" +
    "\011\137\012\142\013\141\014\146\015\140\017\150\020" +
    "\143\021\144\022\134\023\147\024\uff91\025\135\030\132" +
    "\031\133\036\136\037\145\001\002\000\006\005\215\024" +
    "\216\001\002\000\052\005\uff93\010\uff93\011\uff93\012\uff93" +
    "\013\uff93\014\uff93\015\uff93\017\uff93\020\uff93\021\uff93\022" +
    "\uff93\023\uff93\024\uff93\025\uff93\030\uff93\031\uff93\034\uff93" +
    "\035\uff93\036\uff93\037\uff93\001\002\000\052\005\uff94\010" +
    "\uff94\011\uff94\012\uff94\013\uff94\014\uff94\015\uff94\017\uff94" +
    "\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94\030" +
    "\uff94\031\uff94\034\uff94\035\uff94\036\uff94\037\uff94\001\002" +
    "\000\040\004\116\013\100\032\112\033\121\043\120\044" +
    "\124\064\107\065\115\066\114\067\110\072\122\073\111" +
    "\074\101\075\104\076\075\001\002\000\044\005\uff92\011" +
    "\137\012\142\013\141\014\146\015\140\017\150\020\143" +
    "\021\144\022\134\023\147\024\uff92\025\135\030\132\031" +
    "\133\036\136\037\145\001\002\000\042\011\137\012\142" +
    "\013\141\014\146\015\140\017\150\020\143\021\144\022" +
    "\134\023\147\025\135\030\132\031\133\034\221\036\136" +
    "\037\145\001\002\000\056\005\uffaa\010\uffaa\011\uffaa\012" +
    "\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\030\uffaa\031" +
    "\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\001\002" +
    "\000\040\004\116\013\100\032\112\033\121\043\120\044" +
    "\124\064\107\065\115\066\114\067\110\072\122\073\111" +
    "\074\101\075\104\076\075\001\002\000\042\005\224\011" +
    "\137\012\142\013\141\014\146\015\140\017\150\020\143" +
    "\021\144\022\134\023\147\025\135\030\132\031\133\036" +
    "\136\037\145\001\002\000\004\010\225\001\002\000\052" +
    "\005\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015" +
    "\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e" +
    "\025\uff8e\030\uff8e\031\uff8e\034\uff8e\035\uff8e\036\uff8e\037" +
    "\uff8e\001\002\000\040\004\116\013\100\032\112\033\121" +
    "\043\120\044\124\064\107\065\115\066\114\067\110\072" +
    "\122\073\111\074\101\075\104\076\075\001\002\000\042" +
    "\005\230\011\137\012\142\013\141\014\146\015\140\017" +
    "\150\020\143\021\144\022\134\023\147\025\135\030\132" +
    "\031\133\036\136\037\145\001\002\000\004\010\231\001" +
    "\002\000\052\005\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f" +
    "\014\uff8f\015\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023" +
    "\uff8f\024\uff8f\025\uff8f\030\uff8f\031\uff8f\034\uff8f\035\uff8f" +
    "\036\uff8f\037\uff8f\001\002\000\046\007\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\045\uffa9\046\uffa9\047\uffa9\051\uffa9\052\uffa9" +
    "\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061" +
    "\uffa9\062\uffa9\073\uffa9\001\002\000\052\005\uffd2\010\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\140\017\150\020" +
    "\143\021\144\022\134\023\147\024\uffd2\025\135\030\132" +
    "\031\133\034\uffd2\035\uffd2\036\uffd2\037\uffd2\001\002\000" +
    "\042\011\137\012\142\013\141\014\146\015\140\017\150" +
    "\020\143\021\144\022\134\023\147\025\135\030\132\031" +
    "\133\034\235\036\136\037\145\001\002\000\056\005\uffab" +
    "\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016" +
    "\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab" +
    "\025\uffab\030\uffab\031\uffab\033\uffab\034\uffab\035\uffab\036" +
    "\uffab\037\uffab\001\002\000\046\007\uff9a\040\uff9a\041\uff9a" +
    "\042\uff9a\045\uff9a\046\uff9a\047\uff9a\051\uff9a\052\uff9a\053" +
    "\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a" +
    "\062\uff9a\073\uff9a\001\002\000\040\004\116\013\100\032" +
    "\112\033\121\043\120\044\124\064\107\065\115\066\114" +
    "\067\110\072\122\073\111\074\101\075\104\076\075\001" +
    "\002\000\042\005\241\011\137\012\142\013\141\014\146" +
    "\015\140\017\150\020\143\021\144\022\134\023\147\025" +
    "\135\030\132\031\133\036\136\037\145\001\002\000\004" +
    "\010\242\001\002\000\046\007\uff90\040\uff90\041\uff90\042" +
    "\uff90\045\uff90\046\uff90\047\uff90\051\uff90\052\uff90\053\uff90" +
    "\054\uff90\055\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062" +
    "\uff90\073\uff90\001\002\000\046\007\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\045\uffdd\046\uffdd\047\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd" +
    "\062\uffdd\073\uffdd\001\002\000\046\007\uff98\040\uff98\041" +
    "\uff98\042\uff98\045\uff98\046\uff98\047\uff98\051\uff98\052\uff98" +
    "\053\uff98\054\uff98\055\uff98\056\uff98\057\uff98\060\uff98\061" +
    "\uff98\062\uff98\073\uff98\001\002\000\042\010\246\011\137" +
    "\012\142\013\141\014\146\015\140\017\150\020\143\021" +
    "\144\022\134\023\147\025\135\030\132\031\133\036\136" +
    "\037\145\001\002\000\046\007\uff97\040\uff97\041\uff97\042" +
    "\uff97\045\uff97\046\uff97\047\uff97\051\uff97\052\uff97\053\uff97" +
    "\054\uff97\055\uff97\056\uff97\057\uff97\060\uff97\061\uff97\062" +
    "\uff97\073\uff97\001\002\000\006\005\uffb4\010\uffb4\001\002" +
    "\000\006\005\uffb3\010\uffb3\001\002\000\040\004\116\013" +
    "\100\032\112\033\121\043\120\044\124\064\107\065\115" +
    "\066\114\067\110\072\122\073\111\074\101\075\104\076" +
    "\075\001\002\000\042\010\253\011\137\012\142\013\141" +
    "\014\146\015\140\017\150\020\143\021\144\022\134\023" +
    "\147\025\135\030\132\031\133\036\136\037\145\001\002" +
    "\000\102\004\uffb6\007\uffb6\013\uffb6\032\uffb6\033\uffb6\040" +
    "\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\064\uffb6\065\uffb6" +
    "\066\uffb6\067\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076" +
    "\uffb6\001\002\000\040\040\006\041\012\042\022\045\016" +
    "\046\021\047\035\051\063\052\043\055\047\056\041\057" +
    "\050\060\066\061\045\062\052\073\051\001\002\000\042" +
    "\007\257\040\006\041\012\042\022\045\016\046\021\047" +
    "\035\051\063\052\043\055\047\056\041\057\050\060\066" +
    "\061\045\062\052\073\051\001\002\000\046\007\uffed\040" +
    "\uffed\041\uffed\042\uffed\045\uffed\046\uffed\047\uffed\051\uffed" +
    "\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\060" +
    "\uffed\061\uffed\062\uffed\073\uffed\001\002\000\004\055\260" +
    "\001\002\000\004\004\261\001\002\000\040\004\116\013" +
    "\100\032\112\033\121\043\120\044\124\064\107\065\115" +
    "\066\114\067\110\072\122\073\111\074\101\075\104\076" +
    "\075\001\002\000\042\005\263\011\137\012\142\013\141" +
    "\014\146\015\140\017\150\020\143\021\144\022\134\023" +
    "\147\025\135\030\132\031\133\036\136\037\145\001\002" +
    "\000\004\010\264\001\002\000\046\007\uff9b\040\uff9b\041" +
    "\uff9b\042\uff9b\045\uff9b\046\uff9b\047\uff9b\051\uff9b\052\uff9b" +
    "\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061" +
    "\uff9b\062\uff9b\073\uff9b\001\002\000\040\004\116\013\100" +
    "\032\112\033\121\043\120\044\124\064\107\065\115\066" +
    "\114\067\110\072\122\073\111\074\101\075\104\076\075" +
    "\001\002\000\042\005\267\011\137\012\142\013\141\014" +
    "\146\015\140\017\150\020\143\021\144\022\134\023\147" +
    "\025\135\030\132\031\133\036\136\037\145\001\002\000" +
    "\004\006\270\001\002\000\040\040\006\041\012\042\022" +
    "\045\016\046\021\047\035\051\063\052\043\055\047\056" +
    "\041\057\050\060\066\061\045\062\052\073\051\001\002" +
    "\000\042\007\272\040\006\041\012\042\022\045\016\046" +
    "\021\047\035\051\063\052\043\055\047\056\041\057\050" +
    "\060\066\061\045\062\052\073\051\001\002\000\046\007" +
    "\uff9e\040\uff9e\041\uff9e\042\uff9e\045\uff9e\046\uff9e\047\uff9e" +
    "\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057" +
    "\uff9e\060\uff9e\061\uff9e\062\uff9e\073\uff9e\001\002\000\046" +
    "\007\uff99\040\uff99\041\uff99\042\uff99\045\uff99\046\uff99\047" +
    "\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99" +
    "\057\uff99\060\uff99\061\uff99\062\uff99\073\uff99\001\002\000" +
    "\046\007\uffe9\040\uffe9\041\uffe9\042\uffe9\045\uffe9\046\uffe9" +
    "\047\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056" +
    "\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\073\uffe9\001\002" +
    "\000\040\004\116\013\100\032\112\033\121\043\120\044" +
    "\124\064\107\065\115\066\114\067\110\072\122\073\111" +
    "\074\101\075\104\076\075\001\002\000\042\005\277\011" +
    "\137\012\142\013\141\014\146\015\140\017\150\020\143" +
    "\021\144\022\134\023\147\025\135\030\132\031\133\036" +
    "\136\037\145\001\002\000\004\006\300\001\002\000\006" +
    "\053\304\054\301\001\002\000\004\035\316\001\002\000" +
    "\010\007\312\053\304\054\301\001\002\000\010\007\uffa1" +
    "\053\uffa1\054\uffa1\001\002\000\040\004\116\013\100\032" +
    "\112\033\121\043\120\044\124\064\107\065\115\066\114" +
    "\067\110\072\122\073\111\074\101\075\104\076\075\001" +
    "\002\000\004\007\306\001\002\000\046\007\uffa3\040\uffa3" +
    "\041\uffa3\042\uffa3\045\uffa3\046\uffa3\047\uffa3\051\uffa3\052" +
    "\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3" +
    "\061\uffa3\062\uffa3\073\uffa3\001\002\000\042\011\137\012" +
    "\142\013\141\014\146\015\140\017\150\020\143\021\144" +
    "\022\134\023\147\025\135\030\132\031\133\035\310\036" +
    "\136\037\145\001\002\000\040\040\006\041\012\042\022" +
    "\045\016\046\021\047\035\051\063\052\043\055\047\056" +
    "\041\057\050\060\066\061\045\062\052\073\051\001\002" +
    "\000\046\007\uffa0\040\006\041\012\042\022\045\016\046" +
    "\021\047\035\051\063\052\043\053\uffa0\054\uffa0\055\047" +
    "\056\041\057\050\060\066\061\045\062\052\073\051\001" +
    "\002\000\046\007\uffa4\040\uffa4\041\uffa4\042\uffa4\045\uffa4" +
    "\046\uffa4\047\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055" +
    "\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\073\uffa4" +
    "\001\002\000\010\007\uffa2\053\uffa2\054\uffa2\001\002\000" +
    "\004\007\315\001\002\000\046\007\uffa5\040\uffa5\041\uffa5" +
    "\042\uffa5\045\uffa5\046\uffa5\047\uffa5\051\uffa5\052\uffa5\053" +
    "\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5" +
    "\062\uffa5\073\uffa5\001\002\000\040\040\006\041\012\042" +
    "\022\045\016\046\021\047\035\051\063\052\043\055\047" +
    "\056\041\057\050\060\066\061\045\062\052\073\051\001" +
    "\002\000\042\007\uff9f\040\006\041\012\042\022\045\016" +
    "\046\021\047\035\051\063\052\043\055\047\056\041\057" +
    "\050\060\066\061\045\062\052\073\051\001\002\000\016" +
    "\040\006\041\012\042\022\045\016\046\021\073\322\001" +
    "\002\000\040\004\116\013\100\032\112\033\121\043\120" +
    "\044\124\064\107\065\115\066\114\067\110\072\122\073" +
    "\111\074\101\075\104\076\075\001\002\000\004\016\251" +
    "\001\002\000\004\073\335\001\002\000\040\004\116\013" +
    "\100\032\112\033\121\043\120\044\124\064\107\065\115" +
    "\066\114\067\110\072\122\073\111\074\101\075\104\076" +
    "\075\001\002\000\042\010\326\011\137\012\142\013\141" +
    "\014\146\015\140\017\150\020\143\021\144\022\134\023" +
    "\147\025\135\030\132\031\133\036\136\037\145\001\002" +
    "\000\004\073\327\001\002\000\006\026\247\027\250\001" +
    "\002\000\004\005\331\001\002\000\004\006\332\001\002" +
    "\000\040\040\006\041\012\042\022\045\016\046\021\047" +
    "\035\051\063\052\043\055\047\056\041\057\050\060\066" +
    "\061\045\062\052\073\051\001\002\000\042\007\334\040" +
    "\006\041\012\042\022\045\016\046\021\047\035\051\063" +
    "\052\043\055\047\056\041\057\050\060\066\061\045\062" +
    "\052\073\051\001\002\000\046\007\uff9c\040\uff9c\041\uff9c" +
    "\042\uff9c\045\uff9c\046\uff9c\047\uff9c\051\uff9c\052\uff9c\053" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c" +
    "\062\uff9c\073\uff9c\001\002\000\010\010\uffda\016\uffda\024" +
    "\uffda\001\002\000\010\010\337\016\340\024\341\001\002" +
    "\000\102\004\uffdb\007\uffdb\013\uffdb\032\uffdb\033\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb" +
    "\047\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056" +
    "\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\064\uffdb\065\uffdb" +
    "\066\uffdb\067\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076" +
    "\uffdb\001\002\000\040\004\116\013\100\032\112\033\121" +
    "\043\120\044\124\064\107\065\115\066\114\067\110\072" +
    "\122\073\111\074\101\075\104\076\075\001\002\000\004" +
    "\073\342\001\002\000\010\010\uffd9\016\uffd9\024\uffd9\001" +
    "\002\000\042\010\344\011\137\012\142\013\141\014\146" +
    "\015\140\017\150\020\143\021\144\022\134\023\147\025" +
    "\135\030\132\031\133\036\136\037\145\001\002\000\102" +
    "\004\uffdc\007\uffdc\013\uffdc\032\uffdc\033\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc" +
    "\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057" +
    "\uffdc\060\uffdc\061\uffdc\062\uffdc\064\uffdc\065\uffdc\066\uffdc" +
    "\067\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc\001" +
    "\002\000\042\010\346\011\137\012\142\013\141\014\146" +
    "\015\140\017\150\020\143\021\144\022\134\023\147\025" +
    "\135\030\132\031\133\036\136\037\145\001\002\000\004" +
    "\073\327\001\002\000\004\005\350\001\002\000\004\006" +
    "\351\001\002\000\040\040\006\041\012\042\022\045\016" +
    "\046\021\047\035\051\063\052\043\055\047\056\041\057" +
    "\050\060\066\061\045\062\052\073\051\001\002\000\042" +
    "\007\353\040\006\041\012\042\022\045\016\046\021\047" +
    "\035\051\063\052\043\055\047\056\041\057\050\060\066" +
    "\061\045\062\052\073\051\001\002\000\046\007\uff9d\040" +
    "\uff9d\041\uff9d\042\uff9d\045\uff9d\046\uff9d\047\uff9d\051\uff9d" +
    "\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060" +
    "\uff9d\061\uff9d\062\uff9d\073\uff9d\001\002\000\012\010\uffda" +
    "\016\uffda\024\uffda\033\355\001\002\000\004\034\356\001" +
    "\002\000\006\016\360\033\357\001\002\000\004\034\371" +
    "\001\002\000\006\033\121\071\362\001\002\000\004\010" +
    "\370\001\002\000\014\040\006\041\012\042\022\045\016" +
    "\046\021\001\002\000\004\033\364\001\002\000\040\004" +
    "\116\013\100\032\112\033\121\043\120\044\124\064\107" +
    "\065\115\066\114\067\110\072\122\073\111\074\101\075" +
    "\104\076\075\001\002\000\042\011\137\012\142\013\141" +
    "\014\146\015\140\017\150\020\143\021\144\022\134\023" +
    "\147\025\135\030\132\031\133\034\366\036\136\037\145" +
    "\001\002\000\004\010\367\001\002\000\046\007\uffb2\040" +
    "\uffb2\041\uffb2\042\uffb2\045\uffb2\046\uffb2\047\uffb2\051\uffb2" +
    "\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060" +
    "\uffb2\061\uffb2\062\uffb2\073\uffb2\001\002\000\046\007\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\045\uffb0\046\uffb0\047\uffb0\051" +
    "\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0" +
    "\060\uffb0\061\uffb0\062\uffb0\073\uffb0\001\002\000\004\016" +
    "\372\001\002\000\006\033\121\071\374\001\002\000\004" +
    "\010\u0105\001\002\000\014\040\006\041\012\042\022\045" +
    "\016\046\021\001\002\000\004\033\376\001\002\000\040" +
    "\004\116\013\100\032\112\033\121\043\120\044\124\064" +
    "\107\065\115\066\114\067\110\072\122\073\111\074\101" +
    "\075\104\076\075\001\002\000\042\011\137\012\142\013" +
    "\141\014\146\015\140\017\150\020\143\021\144\022\134" +
    "\023\147\025\135\030\132\031\133\034\u0100\036\136\037" +
    "\145\001\002\000\004\033\u0101\001\002\000\040\004\116" +
    "\013\100\032\112\033\121\043\120\044\124\064\107\065" +
    "\115\066\114\067\110\072\122\073\111\074\101\075\104" +
    "\076\075\001\002\000\042\011\137\012\142\013\141\014" +
    "\146\015\140\017\150\020\143\021\144\022\134\023\147" +
    "\025\135\030\132\031\133\034\u0103\036\136\037\145\001" +
    "\002\000\004\010\u0104\001\002\000\046\007\uffb1\040\uffb1" +
    "\041\uffb1\042\uffb1\045\uffb1\046\uffb1\047\uffb1\051\uffb1\052" +
    "\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1" +
    "\061\uffb1\062\uffb1\073\uffb1\001\002\000\046\007\uffaf\040" +
    "\uffaf\041\uffaf\042\uffaf\045\uffaf\046\uffaf\047\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060" +
    "\uffaf\061\uffaf\062\uffaf\073\uffaf\001\002\000\022\002\uff96" +
    "\040\uff96\041\uff96\042\uff96\045\uff96\046\uff96\063\uff96\070" +
    "\uff96\001\002\000\040\004\116\013\100\032\112\033\121" +
    "\043\120\044\124\064\107\065\115\066\114\067\110\072" +
    "\122\073\111\074\101\075\104\076\075\001\002\000\042" +
    "\005\u0109\011\137\012\142\013\141\014\146\015\140\017" +
    "\150\020\143\021\144\022\134\023\147\025\135\030\132" +
    "\031\133\036\136\037\145\001\002\000\004\006\u010a\001" +
    "\002\000\040\040\006\041\012\042\022\045\016\046\021" +
    "\047\035\051\063\052\043\055\047\056\041\057\050\060" +
    "\066\061\045\062\052\073\051\001\002\000\042\007\u010c" +
    "\040\006\041\012\042\022\045\016\046\021\047\035\051" +
    "\063\052\043\055\047\056\041\057\050\060\066\061\045" +
    "\062\052\073\051\001\002\000\050\007\uffa8\040\uffa8\041" +
    "\uffa8\042\uffa8\045\uffa8\046\uffa8\047\uffa8\050\u010d\051\uffa8" +
    "\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060" +
    "\uffa8\061\uffa8\062\uffa8\073\uffa8\001\002\000\006\006\u010e" +
    "\047\035\001\002\000\040\040\006\041\012\042\022\045" +
    "\016\046\021\047\035\051\063\052\043\055\047\056\041" +
    "\057\050\060\066\061\045\062\052\073\051\001\002\000" +
    "\046\007\uffa6\040\uffa6\041\uffa6\042\uffa6\045\uffa6\046\uffa6" +
    "\047\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056" +
    "\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\073\uffa6\001\002" +
    "\000\042\007\u0111\040\006\041\012\042\022\045\016\046" +
    "\021\047\035\051\063\052\043\055\047\056\041\057\050" +
    "\060\066\061\045\062\052\073\051\001\002\000\046\007" +
    "\uffa7\040\uffa7\041\uffa7\042\uffa7\045\uffa7\046\uffa7\047\uffa7" +
    "\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057" +
    "\uffa7\060\uffa7\061\uffa7\062\uffa7\073\uffa7\001\002\000\006" +
    "\005\ufff3\024\ufff3\001\002\000\040\040\006\041\012\042" +
    "\022\045\016\046\021\047\035\051\063\052\043\055\047" +
    "\056\041\057\050\060\066\061\045\062\052\073\051\001" +
    "\002\000\042\007\u0115\040\006\041\012\042\022\045\016" +
    "\046\021\047\035\051\063\052\043\055\047\056\041\057" +
    "\050\060\066\061\045\062\052\073\051\001\002\000\022" +
    "\002\uff95\040\uff95\041\uff95\042\uff95\045\uff95\046\uff95\063" +
    "\uff95\070\uff95\001\002\000\004\004\u0117\001\002\000\042" +
    "\004\116\005\u0119\013\100\032\112\033\121\043\120\044" +
    "\124\064\107\065\115\066\114\067\110\072\122\073\111" +
    "\074\101\075\104\076\075\001\002\000\006\005\u011b\024" +
    "\216\001\002\000\004\010\u011a\001\002\000\022\002\ufffb" +
    "\040\ufffb\041\ufffb\042\ufffb\045\ufffb\046\ufffb\063\ufffb\070" +
    "\ufffb\001\002\000\004\010\u011c\001\002\000\022\002\ufffa" +
    "\040\ufffa\041\ufffa\042\ufffa\045\ufffa\046\ufffa\063\ufffa\070" +
    "\ufffa\001\002\000\004\004\u011e\001\002\000\016\005\u011f" +
    "\040\006\041\012\042\022\045\016\046\021\001\002\000" +
    "\004\006\u0125\001\002\000\006\005\u0121\024\032\001\002" +
    "\000\004\006\u0122\001\002\000\040\040\006\041\012\042" +
    "\022\045\016\046\021\047\035\051\063\052\043\055\047" +
    "\056\041\057\050\060\066\061\045\062\052\073\051\001" +
    "\002\000\042\007\u0124\040\006\041\012\042\022\045\016" +
    "\046\021\047\035\051\063\052\043\055\047\056\041\057" +
    "\050\060\066\061\045\062\052\073\051\001\002\000\022" +
    "\002\ufff7\040\ufff7\041\ufff7\042\ufff7\045\ufff7\046\ufff7\063" +
    "\ufff7\070\ufff7\001\002\000\040\040\006\041\012\042\022" +
    "\045\016\046\021\047\035\051\063\052\043\055\047\056" +
    "\041\057\050\060\066\061\045\062\052\073\051\001\002" +
    "\000\042\007\u0127\040\006\041\012\042\022\045\016\046" +
    "\021\047\035\051\063\052\043\055\047\056\041\057\050" +
    "\060\066\061\045\062\052\073\051\001\002\000\022\002" +
    "\ufff6\040\ufff6\041\ufff6\042\ufff6\045\ufff6\046\ufff6\063\ufff6" +
    "\070\ufff6\001\002\000\022\002\uffff\040\uffff\041\uffff\042" +
    "\uffff\045\uffff\046\uffff\063\uffff\070\uffff\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0127\000\022\002\006\003\004\004\012\005\014\006" +
    "\010\007\016\014\017\053\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\u0127\004" +
    "\012\005\014\006\010\007\016\014\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\027\013\025" +
    "\014\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\032\014\026\001\001\000\002\001\001\000\050\010" +
    "\035\012\045\014\037\015\066\016\064\023\043\026\053" +
    "\027\067\030\063\031\057\032\036\035\060\036\041\037" +
    "\054\040\055\042\070\043\061\044\052\046\056\001\001" +
    "\000\002\001\001\000\046\012\255\014\037\015\066\016" +
    "\064\023\043\026\053\027\067\030\063\031\057\032\036" +
    "\035\060\036\041\037\054\040\055\042\070\043\061\044" +
    "\052\046\056\001\001\000\002\001\001\000\004\017\335" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\020\244\021\116\022\105\024\076\027\122\044\112" +
    "\047\101\050\102\051\075\052\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\020\233\021\116\022\105" +
    "\024\076\027\122\044\112\047\101\050\102\051\075\052" +
    "\073\001\001\000\026\020\104\021\116\022\105\024\076" +
    "\027\122\044\112\047\101\050\102\051\075\052\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\020\232\021\116\022\105\024" +
    "\076\027\122\044\112\047\101\050\102\051\075\052\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\020\206\021\116\022\105\024\076\027\122\044\112" +
    "\047\101\050\102\051\075\052\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\014\171" +
    "\020\172\021\116\022\105\024\076\027\122\044\112\047" +
    "\101\050\102\051\075\052\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\020\124\021\116\022\105\024" +
    "\076\025\125\027\122\044\112\047\101\050\102\051\075" +
    "\052\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\020\130\021\116\022\105\024\076\027" +
    "\122\044\112\047\101\050\102\051\075\052\073\001\001" +
    "\000\002\001\001\000\026\020\170\021\116\022\105\024" +
    "\076\027\122\044\112\047\101\050\102\051\075\052\073" +
    "\001\001\000\026\020\167\021\116\022\105\024\076\027" +
    "\122\044\112\047\101\050\102\051\075\052\073\001\001" +
    "\000\026\020\166\021\116\022\105\024\076\027\122\044" +
    "\112\047\101\050\102\051\075\052\073\001\001\000\026" +
    "\020\165\021\116\022\105\024\076\027\122\044\112\047" +
    "\101\050\102\051\075\052\073\001\001\000\026\020\164" +
    "\021\116\022\105\024\076\027\122\044\112\047\101\050" +
    "\102\051\075\052\073\001\001\000\026\020\163\021\116" +
    "\022\105\024\076\027\122\044\112\047\101\050\102\051" +
    "\075\052\073\001\001\000\026\020\162\021\116\022\105" +
    "\024\076\027\122\044\112\047\101\050\102\051\075\052" +
    "\073\001\001\000\026\020\161\021\116\022\105\024\076" +
    "\027\122\044\112\047\101\050\102\051\075\052\073\001" +
    "\001\000\026\020\160\021\116\022\105\024\076\027\122" +
    "\044\112\047\101\050\102\051\075\052\073\001\001\000" +
    "\026\020\157\021\116\022\105\024\076\027\122\044\112" +
    "\047\101\050\102\051\075\052\073\001\001\000\026\020" +
    "\156\021\116\022\105\024\076\027\122\044\112\047\101" +
    "\050\102\051\075\052\073\001\001\000\026\020\153\021" +
    "\116\022\105\024\076\027\122\044\112\047\101\050\102" +
    "\051\075\052\073\001\001\000\026\020\152\021\116\022" +
    "\105\024\076\027\122\044\112\047\101\050\102\051\075" +
    "\052\073\001\001\000\026\020\151\021\116\022\105\024" +
    "\076\027\122\044\112\047\101\050\102\051\075\052\073" +
    "\001\001\000\026\020\150\021\116\022\105\024\076\027" +
    "\122\044\112\047\101\050\102\051\075\052\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\020\155\021\116\022\105\024\076" +
    "\027\122\044\112\047\101\050\102\051\075\052\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\020\175" +
    "\021\116\022\105\024\076\027\122\044\112\047\101\050" +
    "\102\051\075\052\073\001\001\000\002\001\001\000\026" +
    "\020\177\021\116\022\105\024\076\027\122\044\112\047" +
    "\101\050\102\051\075\052\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\020\203\021" +
    "\116\022\105\024\076\027\122\044\112\047\101\050\102" +
    "\051\075\052\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\020\217" +
    "\021\116\022\105\024\076\027\122\044\112\047\101\050" +
    "\102\051\075\052\073\001\001\000\030\020\211\021\116" +
    "\022\105\024\076\027\122\044\112\045\212\047\101\050" +
    "\102\051\075\052\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\020" +
    "\216\021\116\022\105\024\076\027\122\044\112\047\101" +
    "\050\102\051\075\052\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\020\222\021\116" +
    "\022\105\024\076\027\122\044\112\047\101\050\102\051" +
    "\075\052\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\020\226\021\116\022\105\024" +
    "\076\027\122\044\112\047\101\050\102\051\075\052\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\020\237\021" +
    "\116\022\105\024\076\027\122\044\112\047\101\050\102" +
    "\051\075\052\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\020\251\021\116\022\105\024\076" +
    "\027\122\044\112\047\101\050\102\051\075\052\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\010\254" +
    "\012\045\014\037\015\066\016\064\023\043\026\053\027" +
    "\067\030\063\031\057\032\036\035\060\036\041\037\054" +
    "\040\055\042\070\043\061\044\052\046\056\001\001\000" +
    "\046\012\255\014\037\015\066\016\064\023\043\026\053" +
    "\027\067\030\063\031\057\032\036\035\060\036\041\037" +
    "\054\040\055\042\070\043\061\044\052\046\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\020\261\021\116\022\105\024\076\027\122\044\112" +
    "\047\101\050\102\051\075\052\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\020\265" +
    "\021\116\022\105\024\076\027\122\044\112\047\101\050" +
    "\102\051\075\052\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\010\270\012\045\014\037\015\066\016" +
    "\064\023\043\026\053\027\067\030\063\031\057\032\036" +
    "\035\060\036\041\037\054\040\055\042\070\043\061\044" +
    "\052\046\056\001\001\000\046\012\255\014\037\015\066" +
    "\016\064\023\043\026\053\027\067\030\063\031\057\032" +
    "\036\035\060\036\041\037\054\040\055\042\070\043\061" +
    "\044\052\046\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\020\275\021\116\022\105" +
    "\024\076\027\122\044\112\047\101\050\102\051\075\052" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\033\302\034\304\041\301\001\001\000\002\001\001\000" +
    "\006\033\312\034\313\001\001\000\002\001\001\000\026" +
    "\020\306\021\116\022\105\024\076\027\122\044\112\047" +
    "\101\050\102\051\075\052\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\010\310\012" +
    "\045\014\037\015\066\016\064\023\043\026\053\027\067" +
    "\030\063\031\057\032\036\035\060\036\041\037\054\040" +
    "\055\042\070\043\061\044\052\046\056\001\001\000\046" +
    "\012\255\014\037\015\066\016\064\023\043\026\053\027" +
    "\067\030\063\031\057\032\036\035\060\036\041\037\054" +
    "\040\055\042\070\043\061\044\052\046\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\010\316\012\045\014\037\015\066\016" +
    "\064\023\043\026\053\027\067\030\063\031\057\032\036" +
    "\035\060\036\041\037\054\040\055\042\070\043\061\044" +
    "\052\046\056\001\001\000\046\012\255\014\037\015\066" +
    "\016\064\023\043\026\053\027\067\030\063\031\057\032" +
    "\036\035\060\036\041\037\054\040\055\042\070\043\061" +
    "\044\052\046\056\001\001\000\010\014\322\015\320\016" +
    "\323\001\001\000\026\020\344\021\116\022\105\024\076" +
    "\027\122\044\112\047\101\050\102\051\075\052\073\001" +
    "\001\000\002\001\001\000\004\017\335\001\001\000\026" +
    "\020\324\021\116\022\105\024\076\027\122\044\112\047" +
    "\101\050\102\051\075\052\073\001\001\000\002\001\001" +
    "\000\004\023\327\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\010\332\012\045\014\037" +
    "\015\066\016\064\023\043\026\053\027\067\030\063\031" +
    "\057\032\036\035\060\036\041\037\054\040\055\042\070" +
    "\043\061\044\052\046\056\001\001\000\046\012\255\014" +
    "\037\015\066\016\064\023\043\026\053\027\067\030\063" +
    "\031\057\032\036\035\060\036\041\037\054\040\055\042" +
    "\070\043\061\044\052\046\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\020\342\021\116\022\105\024\076\027\122\044\112" +
    "\047\101\050\102\051\075\052\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\346\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\010\351\012\045\014\037" +
    "\015\066\016\064\023\043\026\053\027\067\030\063\031" +
    "\057\032\036\035\060\036\041\037\054\040\055\042\070" +
    "\043\061\044\052\046\056\001\001\000\046\012\255\014" +
    "\037\015\066\016\064\023\043\026\053\027\067\030\063" +
    "\031\057\032\036\035\060\036\041\037\054\040\055\042" +
    "\070\043\061\044\052\046\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\360\001\001\000\002\001\001" +
    "\000\004\014\362\001\001\000\002\001\001\000\026\020" +
    "\364\021\116\022\105\024\076\027\122\044\112\047\101" +
    "\050\102\051\075\052\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\372\001\001\000\002\001\001\000" +
    "\004\014\374\001\001\000\002\001\001\000\026\020\376" +
    "\021\116\022\105\024\076\027\122\044\112\047\101\050" +
    "\102\051\075\052\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\020\u0101\021\116\022\105\024\076\027" +
    "\122\044\112\047\101\050\102\051\075\052\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\020\u0107\021\116" +
    "\022\105\024\076\027\122\044\112\047\101\050\102\051" +
    "\075\052\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\010\u010a\012\045\014\037\015\066\016\064\023" +
    "\043\026\053\027\067\030\063\031\057\032\036\035\060" +
    "\036\041\037\054\040\055\042\070\043\061\044\052\046" +
    "\056\001\001\000\046\012\255\014\037\015\066\016\064" +
    "\023\043\026\053\027\067\030\063\031\057\032\036\035" +
    "\060\036\041\037\054\040\055\042\070\043\061\044\052" +
    "\046\056\001\001\000\002\001\001\000\004\031\u010e\001" +
    "\001\000\050\010\u010f\012\045\014\037\015\066\016\064" +
    "\023\043\026\053\027\067\030\063\031\057\032\036\035" +
    "\060\036\041\037\054\040\055\042\070\043\061\044\052" +
    "\046\056\001\001\000\002\001\001\000\046\012\255\014" +
    "\037\015\066\016\064\023\043\026\053\027\067\030\063" +
    "\031\057\032\036\035\060\036\041\037\054\040\055\042" +
    "\070\043\061\044\052\046\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\010\u0113\012\045\014\037\015" +
    "\066\016\064\023\043\026\053\027\067\030\063\031\057" +
    "\032\036\035\060\036\041\037\054\040\055\042\070\043" +
    "\061\044\052\046\056\001\001\000\046\012\255\014\037" +
    "\015\066\016\064\023\043\026\053\027\067\030\063\031" +
    "\057\032\036\035\060\036\041\037\054\040\055\042\070" +
    "\043\061\044\052\046\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\020\211\021\116\022\105\024\076" +
    "\027\122\044\112\045\u0117\047\101\050\102\051\075\052" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\u011f\013\025\014\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\010" +
    "\u0122\012\045\014\037\015\066\016\064\023\043\026\053" +
    "\027\067\030\063\031\057\032\036\035\060\036\041\037" +
    "\054\040\055\042\070\043\061\044\052\046\056\001\001" +
    "\000\046\012\255\014\037\015\066\016\064\023\043\026" +
    "\053\027\067\030\063\031\057\032\036\035\060\036\041" +
    "\037\054\040\055\042\070\043\061\044\052\046\056\001" +
    "\001\000\002\001\001\000\050\010\u0125\012\045\014\037" +
    "\015\066\016\064\023\043\026\053\027\067\030\063\031" +
    "\057\032\036\035\060\036\041\037\054\040\055\042\070" +
    "\043\061\044\052\046\056\001\001\000\046\012\255\014" +
    "\037\015\066\016\064\023\043\026\053\027\067\030\063" +
    "\031\057\032\036\035\060\036\041\037\054\040\055\042" +
    "\070\043\061\044\052\046\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public Nodo avl;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= instrucciones_g 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 avl=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("programa",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones_g ::= instrucciones_g instruccion_g 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo padre = new Nodo("instrucciones_g");
                                                         padre.hijos.add((Nodo)a);
                                                         padre.hijos.add((Nodo)b);
                                                         RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones_g",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones_g ::= instruccion_g 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo padre = new Nodo("instrucciones_g");
                                                         padre.hijos.add((Nodo)a);
                                                         RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones_g",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion_g ::= declaracion_fym 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion_g",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion_g ::= sentencia_ejecutar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion_g",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia_ejecutar ::= RESERVADA_EJECUTAR ID PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
    Nodo padre = new Nodo("sentencia_ejecutar"); 
    padre.hijos.add(new Nodo("ID", a));
    RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_ejecutar",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia_ejecutar ::= RESERVADA_EJECUTAR ID PARENTESISABRE parametros_llamada PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
    Nodo padre = new Nodo("sentencia_ejecutar"); 
    padre.hijos.add(new Nodo("ID", a));
    padre.hijos.add((Nodo)b);
    RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_ejecutar",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion_fym ::= declaracion_funcion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_fym",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion_fym ::= declaracion_metodo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_fym",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion_metodo ::= RESERVADA_VOID ID PARENTESISABRE parametros PARENTESISCIERRA LLAVEABRE instrucciones LLAVECIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo padre = new Nodo("declaracion_metodo"); 
    padre.hijos.add(new Nodo("ID", a));
    padre.hijos.add((Nodo)b);
    padre.hijos.add((Nodo)c);
    RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_metodo",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion_metodo ::= RESERVADA_VOID ID PARENTESISABRE PARENTESISCIERRA LLAVEABRE instrucciones LLAVECIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo padre = new Nodo("declaracion_metodo"); 
    padre.hijos.add(new Nodo("ID", a));
    padre.hijos.add((Nodo)b);
    RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_metodo",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros ::= parametro 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo padre = new Nodo("parametros"); 
    padre.hijos.add((Nodo)a);
    RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametros ::= parametros SIGNOCOMA parametro 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo padre = new Nodo("parametros"); 
    padre.hijos.add((Nodo)a);
    padre.hijos.add((Nodo)b);
    RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametro ::= tipo ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo padre = new Nodo("parametro"); 
    padre.hijos.add((Nodo)a);
    padre.hijos.add(new Nodo("ID", b));
    RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= RESERVADA_ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=new Nodo("RESERVADA_ENTERO",a); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= RESERVADA_DOBLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=new Nodo("RESERVADA_DOBLE",a); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= RESERVADA_BINARIO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=new Nodo("RESERVADA_BINARIO",a); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= RESERVADA_CARACTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=new Nodo("RESERVADA_CARACTER",a); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= RESERVADA_CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=new Nodo("RESERVADA_CADENA",a); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("instrucciones");
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)b);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instrucciones ::= instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("instrucciones");
padre.hijos.add((Nodo)a);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= declaracion_var 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= asignacion_var 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= actualizaciones PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= declaracion_vector 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= modificacion_vector 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= funcion_imprimir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= sentencia_selector 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= sentencia_si 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= sentencia_mientras 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion ::= sentencia_para 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion ::= sentencia_hacer 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion ::= sentencia_cortar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion ::= sentencia_continuar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= sentencia_retorno 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= llamada PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion_var ::= tipo lista_variables SIGNOIGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 
Nodo padre = new Nodo("declaracion_var");
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)b);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion_var ::= tipo lista_variables PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 
Nodo padre = new Nodo("declaracion_var");
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)b);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lista_variables ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
Nodo padre = new Nodo("lista_variables");
padre.hijos.add(new Nodo("ID",a));
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lista_variables ::= lista_variables SIGNOCOMA ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("lista_variables");
padre.hijos.add((Nodo)a);
padre.hijos.add(new Nodo("ID",b));
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= expresion SIGNOMAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= expresion SIGNOMENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= expresion SIGNOPOR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= expresion SIGNODIVISION expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= expresion SIGNOPOTENCIA expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= expresion SIGNOMODULO expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= SIGNOMENOS expresion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion SIGNOIGUALIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresion SIGNODIFERENTE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion SIGNOMENOR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion SIGNOMENORIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion SIGNOMAYOR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= expresion SIGNOMAYORIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= expresion SIGNOINTERROGACION expresion DOSPUNTOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
padre.hijos.add((Nodo)d);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= expresion SIGNOOR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= expresion SIGNOAND expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= SIGNONOT expresion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= PARENTESISABRE expresion PARENTESISCIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = (Nodo)a;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= casteo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (Nodo)a;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= vector 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (Nodo)a;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= acceso_vector 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (Nodo)a;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (Nodo)a;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= funcion_redondeo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (Nodo)a;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= funcion_longitud 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (Nodo)a;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= funcion_tipode 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (Nodo)a;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= funcion_acadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (Nodo)a;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= llamada 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (Nodo)a;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // dato ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new Nodo("ID", a);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dato",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // dato ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new Nodo("ENTERO", a);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dato",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // dato ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new Nodo("CADENA", a);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dato",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // dato ::= CHARR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new Nodo("CHARR", a);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dato",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // dato ::= DECIMALES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new Nodo("DECIMALES", a);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dato",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // dato ::= RESERVADA_VERDADERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new Nodo("RESERVADA_VERDADERO", a);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dato",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // dato ::= RESERVADA_FALSO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new Nodo("RESERVADA_FALSO", a);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dato",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // asignacion_var ::= ID SIGNOIGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 
Nodo padre = new Nodo("asignacion_var");
padre.hijos.add(new Nodo("ID", a));
padre.hijos.add((Nodo)b);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_var",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // casteo ::= PARENTESISABRE tipo PARENTESISCIERRA expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
Nodo padre = new Nodo("casteo");
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)b);
RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("casteo",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // actualizaciones ::= ID SIGNOINCREMENTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
Nodo padre = new Nodo("actualizaciones", b);
padre.hijos.add(new Nodo("ID",a));
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("actualizaciones",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // actualizaciones ::= ID SIGNODECREMENTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
Nodo padre = new Nodo("actualizaciones", b);
padre.hijos.add(new Nodo("ID",a));
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("actualizaciones",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // declaracion_vector ::= tipo ID CORCHETEABRE CORCHETECIERRA SIGNOIGUAL RESERVADA_NUEVO tipo CORCHETEABRE expresion CORCHETECIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
    Nodo padre = new Nodo("declaracion_vector");
        padre.hijos.add((Nodo)a);
        padre.hijos.add(new Nodo("ID",b));
        padre.hijos.add((Nodo)c);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_vector",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // declaracion_vector ::= tipo ID CORCHETEABRE CORCHETECIERRA CORCHETEABRE CORCHETECIERRA SIGNOIGUAL RESERVADA_NUEVO tipo CORCHETEABRE expresion CORCHETECIERRA CORCHETEABRE expresion CORCHETECIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-15)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-15)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-15)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-14)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-14)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-14)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
        Nodo padre = new Nodo("declaracion_vector");
        padre.hijos.add((Nodo)a);
        padre.hijos.add(new Nodo("ID",b));
        padre.hijos.add((Nodo)c);
        padre.hijos.add((Nodo)d);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_vector",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-15)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declaracion_vector ::= tipo ID CORCHETEABRE CORCHETECIERRA SIGNOIGUAL vector PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("declaracion_vector");
        padre.hijos.add((Nodo)a);
        padre.hijos.add(new Nodo("ID",b));
        padre.hijos.add((Nodo)c);
        RESULT=padre;


              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_vector",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // declaracion_vector ::= tipo ID CORCHETEABRE CORCHETECIERRA CORCHETEABRE CORCHETECIERRA SIGNOIGUAL vector PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("declaracion_vector");
        padre.hijos.add((Nodo)a);
        padre.hijos.add(new Nodo("ID",b));
        padre.hijos.add((Nodo)c);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_vector",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // vector ::= CORCHETEABRE lista_valores CORCHETECIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 
        Nodo padre = new Nodo("vector");
        padre.hijos.add((Nodo)a);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("vector",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lista_valores ::= expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
        Nodo padre = new Nodo("lista_valores");
        padre.hijos.add((Nodo)a);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_valores",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // lista_valores ::= lista_valores SIGNOCOMA expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("lista_valores");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_valores",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // acceso_vector ::= acceso_vector CORCHETEABRE expresion CORCHETECIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("acceso_vector");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("acceso_vector",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // acceso_vector ::= ID CORCHETEABRE expresion CORCHETECIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("acceso_vector");
        padre.hijos.add(new Nodo("ID",a));
        padre.hijos.add((Nodo)b);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("acceso_vector",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // modificacion_vector ::= acceso_vector SIGNOIGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("modificacion_vector");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("modificacion_vector",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentencia_si ::= RESERVADA_SI PARENTESISABRE expresion PARENTESISCIERRA LLAVEABRE instrucciones LLAVECIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("sentencia_si");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentencia_si ::= RESERVADA_SI PARENTESISABRE expresion PARENTESISCIERRA LLAVEABRE instrucciones LLAVECIERRA RESERVADA_SINO LLAVEABRE instrucciones LLAVECIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("sentencia_si");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        padre.hijos.add((Nodo)c);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentencia_si ::= RESERVADA_SI PARENTESISABRE expresion PARENTESISCIERRA LLAVEABRE instrucciones LLAVECIERRA RESERVADA_SINO sentencia_si 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("sentencia_si");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        padre.hijos.add((Nodo)c);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentencia_selector ::= RESERVADA_SELECTOR PARENTESISABRE expresion PARENTESISCIERRA LLAVEABRE lista_casos defecto LLAVECIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("sentencia_selector");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        padre.hijos.add((Nodo)c);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_selector",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentencia_selector ::= RESERVADA_SELECTOR PARENTESISABRE expresion PARENTESISCIERRA LLAVEABRE lista_casos LLAVECIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("sentencia_selector");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_selector",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentencia_selector ::= RESERVADA_SELECTOR PARENTESISABRE expresion PARENTESISCIERRA LLAVEABRE defecto LLAVECIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("sentencia_selector");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_selector",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // lista_casos ::= lista_casos caso 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("lista_casos");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_casos",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // lista_casos ::= caso 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_casos",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // caso ::= RESERVADA_CASO expresion DOSPUNTOS instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("caso");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("caso",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // defecto ::= RESERVADA_PORDEFECTO DOSPUNTOS instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("defecto");
        padre.hijos.add((Nodo)a);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("defecto",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sentencia_mientras ::= RESERVADA_MIENTRAS PARENTESISABRE expresion PARENTESISCIERRA LLAVEABRE instrucciones LLAVECIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("sentencia_mientras");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sentencia_para ::= RESERVADA_PARA PARENTESISABRE declaracion_var expresion PUNTOYCOMA actualizaciones PARENTESISCIERRA LLAVEABRE instrucciones LLAVECIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("sentencia_para");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        padre.hijos.add((Nodo)c);
        padre.hijos.add((Nodo)d);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_para",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentencia_para ::= RESERVADA_PARA PARENTESISABRE asignacion_var expresion PUNTOYCOMA actualizaciones PARENTESISCIERRA LLAVEABRE instrucciones LLAVECIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("sentencia_para");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        padre.hijos.add((Nodo)c);
        padre.hijos.add((Nodo)d);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_para",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentencia_hacer ::= RESERVADA_HACER LLAVEABRE instrucciones LLAVECIERRA RESERVADA_MIENTRAS PARENTESISABRE expresion PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
        Nodo padre = new Nodo("sentencia_hacer");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_hacer",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentencia_cortar ::= RESERVADA_CORTAR PUNTOYCOMA 
            {
              Object RESULT =null;
		
        Nodo padre = new Nodo("sentencia_cortar");
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_cortar",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentencia_continuar ::= RESERVADA_CONTINUAR PUNTOYCOMA 
            {
              Object RESULT =null;
		
        Nodo padre = new Nodo("sentencia_continuar");
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_continuar",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sentencia_retorno ::= RESERVADA_RETORNO PUNTOYCOMA 
            {
              Object RESULT =null;
		
        Nodo padre = new Nodo("sentencia_retorno");
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_retorno",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sentencia_retorno ::= RESERVADA_RETORNO expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("sentencia_retorno");
        padre.hijos.add((Nodo)a);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_retorno",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // declaracion_funcion ::= tipo ID PARENTESISABRE parametros PARENTESISCIERRA LLAVEABRE instrucciones LLAVECIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("declaracion_funcion");
        padre.hijos.add((Nodo)a);
        padre.hijos.add(new Nodo("ID",b));
        padre.hijos.add((Nodo)c);
        padre.hijos.add((Nodo)d);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // declaracion_funcion ::= tipo ID PARENTESISABRE PARENTESISCIERRA LLAVEABRE instrucciones LLAVECIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("declaracion_funcion");
        padre.hijos.add((Nodo)a);
        padre.hijos.add(new Nodo("ID",b));
        padre.hijos.add((Nodo)c);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // llamada ::= ID PARENTESISABRE parametros_llamada PARENTESISCIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("llamada");
        padre.hijos.add(new Nodo("ID",a));
        padre.hijos.add((Nodo)b);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamada",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // llamada ::= ID PARENTESISABRE PARENTESISCIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
        Nodo padre = new Nodo("llamada");
        padre.hijos.add(new Nodo("ID",a));
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamada",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // parametros_llamada ::= parametros_llamada SIGNOCOMA expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("parametros_llamada");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros_llamada",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // parametros_llamada ::= expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("parametros_llamada");
        padre.hijos.add((Nodo)a);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros_llamada",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // funcion_imprimir ::= RESERVADA_IMPRIMIR PARENTESISABRE expresion PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
        Nodo padre = new Nodo("funcion_imprimir");
        padre.hijos.add((Nodo)a);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funcion_imprimir",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // funcion_redondeo ::= RESERVADA_REDONDEO PARENTESISABRE expresion PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
        Nodo padre = new Nodo("funcion_redondeo");
        padre.hijos.add((Nodo)a);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funcion_redondeo",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // funcion_longitud ::= RESERVADA_LONGITUD PARENTESISABRE expresion PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
        Nodo padre = new Nodo("funcion_longitud");
        padre.hijos.add((Nodo)a);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funcion_longitud",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // funcion_tipode ::= RESERVADA_TIPODE PARENTESISABRE expresion PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
        Nodo padre = new Nodo("funcion_tipode");
        padre.hijos.add((Nodo)a);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funcion_tipode",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // funcion_acadena ::= RESERVADA_ACADENA PARENTESISABRE expresion PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
        Nodo padre = new Nodo("funcion_acadena");
        padre.hijos.add((Nodo)a);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funcion_acadena",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
