
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\041\003\000\002\002" +
    "\004\000\002\002\003\000\002\004\003\000\002\004\003" +
    "\000\002\011\003\000\002\011\005\000\002\013\004\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\010\004\000\002\010" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\004" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\004\000\002\015\007\000\002\015\005\000\002\017\003" +
    "\000\002\017\005\000\002\007\012\000\002\007\011\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\004\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\007\000\002\020\005\000\002\020\005\000\002" +
    "\020\004\000\002\020\005\000\002\020\003\000\002\020" +
    "\003\000\002\003\003\000\002\003\003\000\002\005\005" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\016\006\000\002\022\004\000\002\022" +
    "\004\000\002\023\011\000\002\023\015\000\002\023\013" +
    "\000\002\024\012\000\002\024\011\000\002\024\011\000" +
    "\002\033\004\000\002\033\003\000\002\025\006\000\002" +
    "\026\005\000\002\027\011\000\002\030\014\000\002\030" +
    "\014\000\002\031\013\000\002\032\004\000\002\034\004" +
    "\000\002\035\004\000\002\035\005\000\002\006\012\000" +
    "\002\006\011\000\002\036\006\000\002\036\005\000\002" +
    "\037\005\000\002\037\003\000\002\040\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\330\000\020\040\021\041\022\042\010\045\017\046" +
    "\014\063\012\070\020\001\002\000\004\002\332\001\002" +
    "\000\022\002\ufffe\040\ufffe\041\ufffe\042\ufffe\045\ufffe\046" +
    "\ufffe\063\ufffe\070\ufffe\001\002\000\022\002\000\040\021" +
    "\041\022\042\010\045\017\046\014\063\012\070\020\001" +
    "\002\000\022\002\ufffd\040\ufffd\041\ufffd\042\ufffd\045\ufffd" +
    "\046\ufffd\063\ufffd\070\ufffd\001\002\000\004\073\ufff6\001" +
    "\002\000\022\002\uffca\040\uffca\041\uffca\042\uffca\045\uffca" +
    "\046\uffca\063\uffca\070\uffca\001\002\000\004\073\316\001" +
    "\002\000\022\002\uffc9\040\uffc9\041\uffc9\042\uffc9\045\uffc9" +
    "\046\uffc9\063\uffc9\070\uffc9\001\002\000\004\073\ufff4\001" +
    "\002\000\022\002\ufffc\040\ufffc\041\ufffc\042\ufffc\045\ufffc" +
    "\046\ufffc\063\ufffc\070\ufffc\001\002\000\004\073\115\001" +
    "\002\000\004\073\ufff5\001\002\000\004\073\023\001\002" +
    "\000\004\073\ufff8\001\002\000\004\073\ufff7\001\002\000" +
    "\004\004\026\001\002\000\004\010\025\001\002\000\022" +
    "\002\uffc8\040\uffc8\041\uffc8\042\uffc8\045\uffc8\046\uffc8\063" +
    "\uffc8\070\uffc8\001\002\000\030\004\031\005\032\013\034" +
    "\032\042\043\041\044\043\072\033\073\040\074\030\075" +
    "\036\076\045\001\002\000\050\005\uffcb\010\uffcb\011\uffcb" +
    "\012\uffcb\013\uffcb\014\uffcb\015\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\030\uffcb\031\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\001\002\000\050\005\uffc5\010" +
    "\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\030" +
    "\uffc5\031\uffc5\035\uffc5\036\uffc5\037\uffc5\001\002\000\026" +
    "\004\031\013\034\032\042\043\041\044\043\072\033\073" +
    "\040\074\030\075\036\076\045\001\002\000\050\005\uffa8" +
    "\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\017" +
    "\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8" +
    "\030\uffa8\031\uffa8\035\uffa8\036\uffa8\037\uffa8\001\002\000" +
    "\050\005\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\030\uffc6\031\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\001\002\000\026\004\031\013\034\032\042\043\041\044" +
    "\043\072\033\073\040\074\030\075\036\076\045\001\002" +
    "\000\006\005\107\024\110\001\002\000\050\005\uffc4\010" +
    "\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\030" +
    "\uffc4\031\uffc4\035\uffc4\036\uffc4\037\uffc4\001\002\000\044" +
    "\005\uffa6\011\051\012\060\013\056\014\050\015\061\017" +
    "\065\020\054\021\047\022\053\023\064\024\uffa6\025\062" +
    "\030\055\031\063\036\052\037\057\001\002\000\052\004" +
    "\026\005\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7" +
    "\015\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\030\uffc7\031\uffc7\035\uffc7\036\uffc7\037\uffc7" +
    "\001\002\000\050\005\uffc2\010\uffc2\011\uffc2\012\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\030\uffc2\031\uffc2\035\uffc2\036" +
    "\uffc2\037\uffc2\001\002\000\026\004\031\013\034\032\042" +
    "\043\041\044\043\072\033\073\040\074\030\075\036\076" +
    "\045\001\002\000\050\005\uffc1\010\uffc1\011\uffc1\012\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\017\uffc1\020\uffc1\021\uffc1\022" +
    "\uffc1\023\uffc1\024\uffc1\025\uffc1\030\uffc1\031\uffc1\035\uffc1" +
    "\036\uffc1\037\uffc1\001\002\000\050\005\uffcc\010\uffcc\011" +
    "\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\017\uffcc\020\uffcc" +
    "\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\030\uffcc\031" +
    "\uffcc\035\uffcc\036\uffcc\037\uffcc\001\002\000\050\005\uffc3" +
    "\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\030\uffc3\031\uffc3\035\uffc3\036\uffc3\037\uffc3\001\002\000" +
    "\050\005\uffce\010\uffce\011\051\012\060\013\056\014\050" +
    "\015\061\017\065\020\054\021\047\022\053\023\064\024" +
    "\uffce\025\062\030\uffce\031\uffce\035\uffce\036\052\037\057" +
    "\001\002\000\026\004\031\013\034\032\042\043\041\044" +
    "\043\072\033\073\040\074\030\075\036\076\045\001\002" +
    "\000\026\004\031\013\034\032\042\043\041\044\043\072" +
    "\033\073\040\074\030\075\036\076\045\001\002\000\026" +
    "\004\031\013\034\032\042\043\041\044\043\072\033\073" +
    "\040\074\030\075\036\076\045\001\002\000\026\004\031" +
    "\013\034\032\042\043\041\044\043\072\033\073\040\074" +
    "\030\075\036\076\045\001\002\000\026\004\031\013\034" +
    "\032\042\043\041\044\043\072\033\073\040\074\030\075" +
    "\036\076\045\001\002\000\026\004\031\013\034\032\042" +
    "\043\041\044\043\072\033\073\040\074\030\075\036\076" +
    "\045\001\002\000\026\004\031\013\034\032\042\043\041" +
    "\044\043\072\033\073\040\074\030\075\036\076\045\001" +
    "\002\000\026\004\031\013\034\032\042\043\041\044\043" +
    "\072\033\073\040\074\030\075\036\076\045\001\002\000" +
    "\026\004\031\013\034\032\042\043\041\044\043\072\033" +
    "\073\040\074\030\075\036\076\045\001\002\000\026\004" +
    "\031\013\034\032\042\043\041\044\043\072\033\073\040" +
    "\074\030\075\036\076\045\001\002\000\026\004\031\013" +
    "\034\032\042\043\041\044\043\072\033\073\040\074\030" +
    "\075\036\076\045\001\002\000\026\004\031\013\034\032" +
    "\042\043\041\044\043\072\033\073\040\074\030\075\036" +
    "\076\045\001\002\000\026\004\031\013\034\032\042\043" +
    "\041\044\043\072\033\073\040\074\030\075\036\076\045" +
    "\001\002\000\026\004\031\013\034\032\042\043\041\044" +
    "\043\072\033\073\040\074\030\075\036\076\045\001\002" +
    "\000\026\004\031\013\034\032\042\043\041\044\043\072" +
    "\033\073\040\074\030\075\036\076\045\001\002\000\050" +
    "\005\uffd3\010\uffd3\011\051\012\060\013\056\014\050\015" +
    "\061\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\030\uffd3\031\uffd3\035\uffd3\036\052\037\057\001" +
    "\002\000\050\005\uffd7\010\uffd7\011\051\012\060\013\056" +
    "\014\050\015\061\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\030\uffd7\031\uffd7\035\uffd7\036\052" +
    "\037\057\001\002\000\050\005\uffcf\010\uffcf\011\051\012" +
    "\060\013\056\014\050\015\061\017\065\020\054\021\047" +
    "\022\053\023\064\024\uffcf\025\062\030\uffcf\031\uffcf\035" +
    "\uffcf\036\052\037\057\001\002\000\050\005\uffd6\010\uffd6" +
    "\011\051\012\060\013\056\014\050\015\061\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\030\uffd6" +
    "\031\uffd6\035\uffd6\036\052\037\057\001\002\000\050\005" +
    "\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\030\uffd9\031\uffd9\035\uffd9\036\052\037\057\001\002" +
    "\000\050\005\uffde\010\uffde\011\051\012\uffde\013\uffde\014" +
    "\050\015\061\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\024\uffde\025\uffde\030\uffde\031\uffde\035\uffde\036\052\037" +
    "\057\001\002\000\042\011\051\012\060\013\056\014\050" +
    "\015\061\017\065\020\054\021\047\022\053\023\064\025" +
    "\062\030\055\031\063\035\075\036\052\037\057\001\002" +
    "\000\026\004\031\013\034\032\042\043\041\044\043\072" +
    "\033\073\040\074\030\075\036\076\045\001\002\000\050" +
    "\005\uffd1\010\uffd1\011\051\012\060\013\056\014\050\015" +
    "\061\017\065\020\054\021\047\022\053\023\064\024\uffd1" +
    "\025\062\030\055\031\063\035\uffd1\036\052\037\057\001" +
    "\002\000\050\005\uffdd\010\uffdd\011\051\012\uffdd\013\uffdd" +
    "\014\050\015\061\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\030\uffdd\031\uffdd\035\uffdd\036\052" +
    "\037\057\001\002\000\050\005\uffd0\010\uffd0\011\051\012" +
    "\060\013\056\014\050\015\061\017\065\020\054\021\047" +
    "\022\053\023\064\024\uffd0\025\062\030\uffd0\031\063\035" +
    "\uffd0\036\052\037\057\001\002\000\050\005\uffd5\010\uffd5" +
    "\011\051\012\060\013\056\014\050\015\061\017\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\030\uffd5" +
    "\031\uffd5\035\uffd5\036\052\037\057\001\002\000\050\005" +
    "\uffd4\010\uffd4\011\051\012\060\013\056\014\050\015\061" +
    "\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\030\uffd4\031\uffd4\035\uffd4\036\052\037\057\001\002" +
    "\000\046\005\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014" +
    "\uffda\015\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\030\uffda\031\uffda\035\uffda\037\057\001" +
    "\002\000\050\005\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\030\uffdc\031\uffdc\035\uffdc\036\052" +
    "\037\057\001\002\000\050\005\uffdb\010\uffdb\011\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\025\uffdb\030\uffdb\031\uffdb\035" +
    "\uffdb\036\052\037\057\001\002\000\050\005\uffd2\010\uffd2" +
    "\011\051\012\060\013\056\014\050\015\061\017\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\030\uffd2" +
    "\031\uffd2\035\uffd2\036\052\037\057\001\002\000\050\005" +
    "\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9" +
    "\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025" +
    "\uffa9\030\uffa9\031\uffa9\035\uffa9\036\uffa9\037\uffa9\001\002" +
    "\000\026\004\031\013\034\032\042\043\041\044\043\072" +
    "\033\073\040\074\030\075\036\076\045\001\002\000\044" +
    "\005\uffa7\011\051\012\060\013\056\014\050\015\061\017" +
    "\065\020\054\021\047\022\053\023\064\024\uffa7\025\062" +
    "\030\055\031\063\036\052\037\057\001\002\000\050\005" +
    "\uffd8\010\uffd8\011\051\012\uffd8\013\uffd8\014\050\015\061" +
    "\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\030\uffd8\031\uffd8\035\uffd8\036\052\037\057\001\002" +
    "\000\042\005\114\011\051\012\060\013\056\014\050\015" +
    "\061\017\065\020\054\021\047\022\053\023\064\025\062" +
    "\030\055\031\063\036\052\037\057\001\002\000\050\005" +
    "\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\030\uffcd\031\uffcd\035\uffcd\036\uffcd\037\uffcd\001\002" +
    "\000\004\004\116\001\002\000\016\005\117\040\021\041" +
    "\022\042\010\045\017\046\014\001\002\000\004\006\313" +
    "\001\002\000\006\005\ufffb\024\ufffb\001\002\000\004\073" +
    "\312\001\002\000\006\005\124\024\123\001\002\000\014" +
    "\040\021\041\022\042\010\045\017\046\014\001\002\000" +
    "\004\006\125\001\002\000\040\040\021\041\022\042\010" +
    "\045\017\046\014\047\152\051\143\052\147\055\131\056" +
    "\145\057\136\060\155\061\156\062\134\073\137\001\002" +
    "\000\042\007\310\040\021\041\022\042\010\045\017\046" +
    "\014\047\152\051\143\052\147\055\131\056\145\057\136" +
    "\060\155\061\156\062\134\073\137\001\002\000\046\007" +
    "\uffed\040\uffed\041\uffed\042\uffed\045\uffed\046\uffed\047\uffed" +
    "\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057" +
    "\uffed\060\uffed\061\uffed\062\uffed\073\uffed\001\002\000\004" +
    "\073\300\001\002\000\004\004\272\001\002\000\046\007" +
    "\uffea\040\uffea\041\uffea\042\uffea\045\uffea\046\uffea\047\uffea" +
    "\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057" +
    "\uffea\060\uffea\061\uffea\062\uffea\073\uffea\001\002\000\004" +
    "\010\271\001\002\000\030\004\031\010\266\013\034\032" +
    "\042\043\041\044\043\072\033\073\040\074\030\075\036" +
    "\076\045\001\002\000\046\007\ufff2\040\ufff2\041\ufff2\042" +
    "\ufff2\045\ufff2\046\ufff2\047\ufff2\051\ufff2\052\ufff2\053\ufff2" +
    "\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062" +
    "\ufff2\073\ufff2\001\002\000\004\006\256\001\002\000\012" +
    "\004\026\016\237\026\235\027\236\001\002\000\004\010" +
    "\255\001\002\000\046\007\uffe9\040\uffe9\041\uffe9\042\uffe9" +
    "\045\uffe9\046\uffe9\047\uffe9\051\uffe9\052\uffe9\053\uffe9\054" +
    "\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9" +
    "\073\uffe9\001\002\000\046\007\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\045\uffe8\046\uffe8\047\uffe8\051\uffe8\052\uffe8\053\uffe8" +
    "\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062" +
    "\uffe8\073\uffe8\001\002\000\004\004\251\001\002\000\046" +
    "\007\uffee\040\uffee\041\uffee\042\uffee\045\uffee\046\uffee\047" +
    "\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee" +
    "\057\uffee\060\uffee\061\uffee\062\uffee\073\uffee\001\002\000" +
    "\004\004\221\001\002\000\046\007\uffec\040\uffec\041\uffec" +
    "\042\uffec\045\uffec\046\uffec\047\uffec\051\uffec\052\uffec\053" +
    "\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec" +
    "\062\uffec\073\uffec\001\002\000\004\004\176\001\002\000" +
    "\046\007\uffeb\040\uffeb\041\uffeb\042\uffeb\045\uffeb\046\uffeb" +
    "\047\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056" +
    "\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\073\uffeb\001\002" +
    "\000\046\007\uffe6\040\uffe6\041\uffe6\042\uffe6\045\uffe6\046" +
    "\uffe6\047\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6" +
    "\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\073\uffe6\001" +
    "\002\000\004\004\162\001\002\000\046\007\ufff0\040\ufff0" +
    "\041\ufff0\042\ufff0\045\ufff0\046\ufff0\047\ufff0\051\ufff0\052" +
    "\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0" +
    "\061\ufff0\062\ufff0\073\ufff0\001\002\000\046\007\ufff1\040" +
    "\ufff1\041\ufff1\042\ufff1\045\ufff1\046\ufff1\047\ufff1\051\ufff1" +
    "\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060" +
    "\ufff1\061\ufff1\062\ufff1\073\ufff1\001\002\000\004\010\161" +
    "\001\002\000\004\010\160\001\002\000\046\007\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\045\uffe7\046\uffe7\047\uffe7\051\uffe7" +
    "\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060" +
    "\uffe7\061\uffe7\062\uffe7\073\uffe7\001\002\000\046\007\uffae" +
    "\040\uffae\041\uffae\042\uffae\045\uffae\046\uffae\047\uffae\051" +
    "\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae" +
    "\060\uffae\061\uffae\062\uffae\073\uffae\001\002\000\046\007" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\045\uffaf\046\uffaf\047\uffaf" +
    "\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057" +
    "\uffaf\060\uffaf\061\uffaf\062\uffaf\073\uffaf\001\002\000\026" +
    "\004\031\013\034\032\042\043\041\044\043\072\033\073" +
    "\040\074\030\075\036\076\045\001\002\000\042\005\164" +
    "\011\051\012\060\013\056\014\050\015\061\017\065\020" +
    "\054\021\047\022\053\023\064\025\062\030\055\031\063" +
    "\036\052\037\057\001\002\000\004\006\165\001\002\000" +
    "\040\040\021\041\022\042\010\045\017\046\014\047\152" +
    "\051\143\052\147\055\131\056\145\057\136\060\155\061" +
    "\156\062\134\073\137\001\002\000\042\007\170\040\021" +
    "\041\022\042\010\045\017\046\014\047\152\051\143\052" +
    "\147\055\131\056\145\057\136\060\155\061\156\062\134" +
    "\073\137\001\002\000\046\007\ufff3\040\ufff3\041\ufff3\042" +
    "\ufff3\045\ufff3\046\ufff3\047\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062" +
    "\ufff3\073\ufff3\001\002\000\050\007\uffbd\040\uffbd\041\uffbd" +
    "\042\uffbd\045\uffbd\046\uffbd\047\uffbd\050\171\051\uffbd\052" +
    "\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd" +
    "\061\uffbd\062\uffbd\073\uffbd\001\002\000\006\006\173\047" +
    "\152\001\002\000\046\007\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\045\uffbb\046\uffbb\047\uffbb\051\uffbb\052\uffbb\053\uffbb\054" +
    "\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb" +
    "\073\uffbb\001\002\000\040\040\021\041\022\042\010\045" +
    "\017\046\014\047\152\051\143\052\147\055\131\056\145" +
    "\057\136\060\155\061\156\062\134\073\137\001\002\000" +
    "\042\007\175\040\021\041\022\042\010\045\017\046\014" +
    "\047\152\051\143\052\147\055\131\056\145\057\136\060" +
    "\155\061\156\062\134\073\137\001\002\000\046\007\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\045\uffbc\046\uffbc\047\uffbc\051" +
    "\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc" +
    "\060\uffbc\061\uffbc\062\uffbc\073\uffbc\001\002\000\026\004" +
    "\031\013\034\032\042\043\041\044\043\072\033\073\040" +
    "\074\030\075\036\076\045\001\002\000\042\005\200\011" +
    "\051\012\060\013\056\014\050\015\061\017\065\020\054" +
    "\021\047\022\053\023\064\025\062\030\055\031\063\036" +
    "\052\037\057\001\002\000\004\006\201\001\002\000\006" +
    "\053\205\054\203\001\002\000\010\007\216\053\205\054" +
    "\203\001\002\000\004\035\213\001\002\000\010\007\uffb6" +
    "\053\uffb6\054\uffb6\001\002\000\026\004\031\013\034\032" +
    "\042\043\041\044\043\072\033\073\040\074\030\075\036" +
    "\076\045\001\002\000\004\007\207\001\002\000\046\007" +
    "\uffb8\040\uffb8\041\uffb8\042\uffb8\045\uffb8\046\uffb8\047\uffb8" +
    "\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057" +
    "\uffb8\060\uffb8\061\uffb8\062\uffb8\073\uffb8\001\002\000\042" +
    "\011\051\012\060\013\056\014\050\015\061\017\065\020" +
    "\054\021\047\022\053\023\064\025\062\030\055\031\063" +
    "\035\211\036\052\037\057\001\002\000\040\040\021\041" +
    "\022\042\010\045\017\046\014\047\152\051\143\052\147" +
    "\055\131\056\145\057\136\060\155\061\156\062\134\073" +
    "\137\001\002\000\046\007\uffb5\040\021\041\022\042\010" +
    "\045\017\046\014\047\152\051\143\052\147\053\uffb5\054" +
    "\uffb5\055\131\056\145\057\136\060\155\061\156\062\134" +
    "\073\137\001\002\000\040\040\021\041\022\042\010\045" +
    "\017\046\014\047\152\051\143\052\147\055\131\056\145" +
    "\057\136\060\155\061\156\062\134\073\137\001\002\000" +
    "\042\007\uffb4\040\021\041\022\042\010\045\017\046\014" +
    "\047\152\051\143\052\147\055\131\056\145\057\136\060" +
    "\155\061\156\062\134\073\137\001\002\000\010\007\uffb7" +
    "\053\uffb7\054\uffb7\001\002\000\046\007\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\045\uffb9\046\uffb9\047\uffb9\051\uffb9\052\uffb9" +
    "\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061" +
    "\uffb9\062\uffb9\073\uffb9\001\002\000\004\007\220\001\002" +
    "\000\046\007\uffba\040\uffba\041\uffba\042\uffba\045\uffba\046" +
    "\uffba\047\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba" +
    "\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\073\uffba\001" +
    "\002\000\016\040\021\041\022\042\010\045\017\046\014" +
    "\073\223\001\002\000\026\004\031\013\034\032\042\043" +
    "\041\044\043\072\033\073\040\074\030\075\036\076\045" +
    "\001\002\000\004\016\237\001\002\000\026\004\031\013" +
    "\034\032\042\043\041\044\043\072\033\073\040\074\030" +
    "\075\036\076\045\001\002\000\042\010\226\011\051\012" +
    "\060\013\056\014\050\015\061\017\065\020\054\021\047" +
    "\022\053\023\064\025\062\030\055\031\063\036\052\037" +
    "\057\001\002\000\004\073\227\001\002\000\006\026\235" +
    "\027\236\001\002\000\004\005\231\001\002\000\004\006" +
    "\232\001\002\000\040\040\021\041\022\042\010\045\017" +
    "\046\014\047\152\051\143\052\147\055\131\056\145\057" +
    "\136\060\155\061\156\062\134\073\137\001\002\000\042" +
    "\007\234\040\021\041\022\042\010\045\017\046\014\047" +
    "\152\051\143\052\147\055\131\056\145\057\136\060\155" +
    "\061\156\062\134\073\137\001\002\000\046\007\uffb1\040" +
    "\uffb1\041\uffb1\042\uffb1\045\uffb1\046\uffb1\047\uffb1\051\uffb1" +
    "\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060" +
    "\uffb1\061\uffb1\062\uffb1\073\uffb1\001\002\000\006\005\uffbf" +
    "\010\uffbf\001\002\000\006\005\uffbe\010\uffbe\001\002\000" +
    "\026\004\031\013\034\032\042\043\041\044\043\072\033" +
    "\073\040\074\030\075\036\076\045\001\002\000\042\010" +
    "\241\011\051\012\060\013\056\014\050\015\061\017\065" +
    "\020\054\021\047\022\053\023\064\025\062\030\055\031" +
    "\063\036\052\037\057\001\002\000\070\004\uffc0\007\uffc0" +
    "\013\uffc0\032\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044" +
    "\uffc0\045\uffc0\046\uffc0\047\uffc0\051\uffc0\052\uffc0\053\uffc0" +
    "\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062" +
    "\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0\076\uffc0\001\002" +
    "\000\042\010\243\011\051\012\060\013\056\014\050\015" +
    "\061\017\065\020\054\021\047\022\053\023\064\025\062" +
    "\030\055\031\063\036\052\037\057\001\002\000\004\073" +
    "\227\001\002\000\004\005\245\001\002\000\004\006\246" +
    "\001\002\000\040\040\021\041\022\042\010\045\017\046" +
    "\014\047\152\051\143\052\147\055\131\056\145\057\136" +
    "\060\155\061\156\062\134\073\137\001\002\000\042\007" +
    "\250\040\021\041\022\042\010\045\017\046\014\047\152" +
    "\051\143\052\147\055\131\056\145\057\136\060\155\061" +
    "\156\062\134\073\137\001\002\000\046\007\uffb2\040\uffb2" +
    "\041\uffb2\042\uffb2\045\uffb2\046\uffb2\047\uffb2\051\uffb2\052" +
    "\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2" +
    "\061\uffb2\062\uffb2\073\uffb2\001\002\000\026\004\031\013" +
    "\034\032\042\043\041\044\043\072\033\073\040\074\030" +
    "\075\036\076\045\001\002\000\042\005\253\011\051\012" +
    "\060\013\056\014\050\015\061\017\065\020\054\021\047" +
    "\022\053\023\064\025\062\030\055\031\063\036\052\037" +
    "\057\001\002\000\004\010\254\001\002\000\046\007\uffa5" +
    "\040\uffa5\041\uffa5\042\uffa5\045\uffa5\046\uffa5\047\uffa5\051" +
    "\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5" +
    "\060\uffa5\061\uffa5\062\uffa5\073\uffa5\001\002\000\046\007" +
    "\uffe5\040\uffe5\041\uffe5\042\uffe5\045\uffe5\046\uffe5\047\uffe5" +
    "\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057" +
    "\uffe5\060\uffe5\061\uffe5\062\uffe5\073\uffe5\001\002\000\040" +
    "\040\021\041\022\042\010\045\017\046\014\047\152\051" +
    "\143\052\147\055\131\056\145\057\136\060\155\061\156" +
    "\062\134\073\137\001\002\000\042\007\260\040\021\041" +
    "\022\042\010\045\017\046\014\047\152\051\143\052\147" +
    "\055\131\056\145\057\136\060\155\061\156\062\134\073" +
    "\137\001\002\000\004\055\261\001\002\000\004\004\262" +
    "\001\002\000\026\004\031\013\034\032\042\043\041\044" +
    "\043\072\033\073\040\074\030\075\036\076\045\001\002" +
    "\000\042\005\264\011\051\012\060\013\056\014\050\015" +
    "\061\017\065\020\054\021\047\022\053\023\064\025\062" +
    "\030\055\031\063\036\052\037\057\001\002\000\004\010" +
    "\265\001\002\000\046\007\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\045\uffb0\046\uffb0\047\uffb0\051\uffb0\052\uffb0\053\uffb0\054" +
    "\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0" +
    "\073\uffb0\001\002\000\046\007\uffad\040\uffad\041\uffad\042" +
    "\uffad\045\uffad\046\uffad\047\uffad\051\uffad\052\uffad\053\uffad" +
    "\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062" +
    "\uffad\073\uffad\001\002\000\042\010\270\011\051\012\060" +
    "\013\056\014\050\015\061\017\065\020\054\021\047\022" +
    "\053\023\064\025\062\030\055\031\063\036\052\037\057" +
    "\001\002\000\046\007\uffac\040\uffac\041\uffac\042\uffac\045" +
    "\uffac\046\uffac\047\uffac\051\uffac\052\uffac\053\uffac\054\uffac" +
    "\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac\073" +
    "\uffac\001\002\000\046\007\uffef\040\uffef\041\uffef\042\uffef" +
    "\045\uffef\046\uffef\047\uffef\051\uffef\052\uffef\053\uffef\054" +
    "\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef" +
    "\073\uffef\001\002\000\026\004\031\013\034\032\042\043" +
    "\041\044\043\072\033\073\040\074\030\075\036\076\045" +
    "\001\002\000\042\005\274\011\051\012\060\013\056\014" +
    "\050\015\061\017\065\020\054\021\047\022\053\023\064" +
    "\025\062\030\055\031\063\036\052\037\057\001\002\000" +
    "\004\006\275\001\002\000\040\040\021\041\022\042\010" +
    "\045\017\046\014\047\152\051\143\052\147\055\131\056" +
    "\145\057\136\060\155\061\156\062\134\073\137\001\002" +
    "\000\042\007\277\040\021\041\022\042\010\045\017\046" +
    "\014\047\152\051\143\052\147\055\131\056\145\057\136" +
    "\060\155\061\156\062\134\073\137\001\002\000\046\007" +
    "\uffb3\040\uffb3\041\uffb3\042\uffb3\045\uffb3\046\uffb3\047\uffb3" +
    "\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057" +
    "\uffb3\060\uffb3\061\uffb3\062\uffb3\073\uffb3\001\002\000\010" +
    "\010\uffe2\016\uffe2\024\uffe2\001\002\000\010\010\302\016" +
    "\304\024\303\001\002\000\070\004\uffe3\007\uffe3\013\uffe3" +
    "\032\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045" +
    "\uffe3\046\uffe3\047\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3" +
    "\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\072" +
    "\uffe3\073\uffe3\074\uffe3\075\uffe3\076\uffe3\001\002\000\004" +
    "\073\307\001\002\000\026\004\031\013\034\032\042\043" +
    "\041\044\043\072\033\073\040\074\030\075\036\076\045" +
    "\001\002\000\042\010\306\011\051\012\060\013\056\014" +
    "\050\015\061\017\065\020\054\021\047\022\053\023\064" +
    "\025\062\030\055\031\063\036\052\037\057\001\002\000" +
    "\070\004\uffe4\007\uffe4\013\uffe4\032\uffe4\040\uffe4\041\uffe4" +
    "\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\051" +
    "\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4" +
    "\060\uffe4\061\uffe4\062\uffe4\072\uffe4\073\uffe4\074\uffe4\075" +
    "\uffe4\076\uffe4\001\002\000\010\010\uffe1\016\uffe1\024\uffe1" +
    "\001\002\000\022\002\uffab\040\uffab\041\uffab\042\uffab\045" +
    "\uffab\046\uffab\063\uffab\070\uffab\001\002\000\006\005\ufffa" +
    "\024\ufffa\001\002\000\006\005\ufff9\024\ufff9\001\002\000" +
    "\040\040\021\041\022\042\010\045\017\046\014\047\152" +
    "\051\143\052\147\055\131\056\145\057\136\060\155\061" +
    "\156\062\134\073\137\001\002\000\042\007\315\040\021" +
    "\041\022\042\010\045\017\046\014\047\152\051\143\052" +
    "\147\055\131\056\145\057\136\060\155\061\156\062\134" +
    "\073\137\001\002\000\022\002\uffaa\040\uffaa\041\uffaa\042" +
    "\uffaa\045\uffaa\046\uffaa\063\uffaa\070\uffaa\001\002\000\004" +
    "\004\317\001\002\000\016\005\320\040\021\041\022\042" +
    "\010\045\017\046\014\001\002\000\004\006\326\001\002" +
    "\000\006\005\322\024\123\001\002\000\004\006\323\001" +
    "\002\000\040\040\021\041\022\042\010\045\017\046\014" +
    "\047\152\051\143\052\147\055\131\056\145\057\136\060" +
    "\155\061\156\062\134\073\137\001\002\000\042\007\325" +
    "\040\021\041\022\042\010\045\017\046\014\047\152\051" +
    "\143\052\147\055\131\056\145\057\136\060\155\061\156" +
    "\062\134\073\137\001\002\000\022\002\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\045\uffe0\046\uffe0\063\uffe0\070\uffe0\001\002" +
    "\000\040\040\021\041\022\042\010\045\017\046\014\047" +
    "\152\051\143\052\147\055\131\056\145\057\136\060\155" +
    "\061\156\062\134\073\137\001\002\000\042\007\330\040" +
    "\021\041\022\042\010\045\017\046\014\047\152\051\143" +
    "\052\147\055\131\056\145\057\136\060\155\061\156\062" +
    "\134\073\137\001\002\000\022\002\uffdf\040\uffdf\041\uffdf" +
    "\042\uffdf\045\uffdf\046\uffdf\063\uffdf\070\uffdf\001\002\000" +
    "\022\002\uffff\040\uffff\041\uffff\042\uffff\045\uffff\046\uffff" +
    "\063\uffff\070\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\330\000\022\002\005\003\004\004\010\005\012\006" +
    "\006\007\014\014\015\041\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\330\004\010\005\012\006" +
    "\006\007\014\014\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\020\036\021\043\036\026\037" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\020\112\021\043\036\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\111\021\043\036\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\045\021\043" +
    "\036\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\105\021\043" +
    "\036\026\001\001\000\010\020\104\021\043\036\026\001" +
    "\001\000\010\020\103\021\043\036\026\001\001\000\010" +
    "\020\102\021\043\036\026\001\001\000\010\020\101\021" +
    "\043\036\026\001\001\000\010\020\100\021\043\036\026" +
    "\001\001\000\010\020\077\021\043\036\026\001\001\000" +
    "\010\020\076\021\043\036\026\001\001\000\010\020\073" +
    "\021\043\036\026\001\001\000\010\020\072\021\043\036" +
    "\026\001\001\000\010\020\071\021\043\036\026\001\001" +
    "\000\010\020\070\021\043\036\026\001\001\000\010\020" +
    "\067\021\043\036\026\001\001\000\010\020\066\021\043" +
    "\036\026\001\001\000\010\020\065\021\043\036\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\075\021\043\036\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\110\021\043\036\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\121\013\117\014\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\310\014\120\001\001" +
    "\000\002\001\001\000\042\010\125\012\134\014\127\015" +
    "\153\016\152\022\132\023\145\024\126\027\147\030\131" +
    "\031\140\032\141\034\156\035\150\036\137\040\143\001" +
    "\001\000\040\012\166\014\127\015\153\016\152\022\132" +
    "\023\145\024\126\027\147\030\131\031\140\032\141\034" +
    "\156\035\150\036\137\040\143\001\001\000\002\001\001" +
    "\000\004\017\300\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\266\021\043\036\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\162\021" +
    "\043\036\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\010\165\012\134\014\127\015\153\016\152\022" +
    "\132\023\145\024\126\027\147\030\131\031\140\032\141" +
    "\034\156\035\150\036\137\040\143\001\001\000\040\012" +
    "\166\014\127\015\153\016\152\022\132\023\145\024\126" +
    "\027\147\030\131\031\140\032\141\034\156\035\150\036" +
    "\137\040\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\171\001\001\000\002\001\001\000\042\010" +
    "\173\012\134\014\127\015\153\016\152\022\132\023\145" +
    "\024\126\027\147\030\131\031\140\032\141\034\156\035" +
    "\150\036\137\040\143\001\001\000\040\012\166\014\127" +
    "\015\153\016\152\022\132\023\145\024\126\027\147\030" +
    "\131\031\140\032\141\034\156\035\150\036\137\040\143" +
    "\001\001\000\002\001\001\000\010\020\176\021\043\036" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\025\203\026\205\033\201\001\001\000\006\025\214\026" +
    "\216\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\020\207\021\043\036\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\010\211\012\134" +
    "\014\127\015\153\016\152\022\132\023\145\024\126\027" +
    "\147\030\131\031\140\032\141\034\156\035\150\036\137" +
    "\040\143\001\001\000\040\012\166\014\127\015\153\016" +
    "\152\022\132\023\145\024\126\027\147\030\131\031\140" +
    "\032\141\034\156\035\150\036\137\040\143\001\001\000" +
    "\042\010\213\012\134\014\127\015\153\016\152\022\132" +
    "\023\145\024\126\027\147\030\131\031\140\032\141\034" +
    "\156\035\150\036\137\040\143\001\001\000\040\012\166" +
    "\014\127\015\153\016\152\022\132\023\145\024\126\027" +
    "\147\030\131\031\140\032\141\034\156\035\150\036\137" +
    "\040\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\127\015\221" +
    "\016\223\001\001\000\010\020\241\021\043\036\026\001" +
    "\001\000\002\001\001\000\010\020\224\021\043\036\026" +
    "\001\001\000\002\001\001\000\004\022\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\010\232\012\134\014\127\015\153\016\152\022\132\023" +
    "\145\024\126\027\147\030\131\031\140\032\141\034\156" +
    "\035\150\036\137\040\143\001\001\000\040\012\166\014" +
    "\127\015\153\016\152\022\132\023\145\024\126\027\147" +
    "\030\131\031\140\032\141\034\156\035\150\036\137\040" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\237\021\043\036\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\243\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\010\246\012\134\014\127\015\153\016\152\022\132" +
    "\023\145\024\126\027\147\030\131\031\140\032\141\034" +
    "\156\035\150\036\137\040\143\001\001\000\040\012\166" +
    "\014\127\015\153\016\152\022\132\023\145\024\126\027" +
    "\147\030\131\031\140\032\141\034\156\035\150\036\137" +
    "\040\143\001\001\000\002\001\001\000\010\020\251\021" +
    "\043\036\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\010\256\012" +
    "\134\014\127\015\153\016\152\022\132\023\145\024\126" +
    "\027\147\030\131\031\140\032\141\034\156\035\150\036" +
    "\137\040\143\001\001\000\040\012\166\014\127\015\153" +
    "\016\152\022\132\023\145\024\126\027\147\030\131\031" +
    "\140\032\141\034\156\035\150\036\137\040\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\262\021" +
    "\043\036\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\272\021\043" +
    "\036\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\010\275\012\134\014\127\015\153\016\152\022\132" +
    "\023\145\024\126\027\147\030\131\031\140\032\141\034" +
    "\156\035\150\036\137\040\143\001\001\000\040\012\166" +
    "\014\127\015\153\016\152\022\132\023\145\024\126\027" +
    "\147\030\131\031\140\032\141\034\156\035\150\036\137" +
    "\040\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\020\304\021\043\036\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\010\313\012\134\014" +
    "\127\015\153\016\152\022\132\023\145\024\126\027\147" +
    "\030\131\031\140\032\141\034\156\035\150\036\137\040" +
    "\143\001\001\000\040\012\166\014\127\015\153\016\152" +
    "\022\132\023\145\024\126\027\147\030\131\031\140\032" +
    "\141\034\156\035\150\036\137\040\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\320\013\117\014" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\010\323\012\134\014\127\015\153\016" +
    "\152\022\132\023\145\024\126\027\147\030\131\031\140" +
    "\032\141\034\156\035\150\036\137\040\143\001\001\000" +
    "\040\012\166\014\127\015\153\016\152\022\132\023\145" +
    "\024\126\027\147\030\131\031\140\032\141\034\156\035" +
    "\150\036\137\040\143\001\001\000\002\001\001\000\042" +
    "\010\326\012\134\014\127\015\153\016\152\022\132\023" +
    "\145\024\126\027\147\030\131\031\140\032\141\034\156" +
    "\035\150\036\137\040\143\001\001\000\040\012\166\014" +
    "\127\015\153\016\152\022\132\023\145\024\126\027\147" +
    "\030\131\031\140\032\141\034\156\035\150\036\137\040" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public Interpreter Proyecto2Compi1;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= instrucciones_g 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo x = (Nodo)a;
x.nivel = ""+x.hashCode();
Proyecto2Compi1= new Interpreter(x);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("programa",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones_g ::= instrucciones_g instruccion_g 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo padre = new Nodo("instrucciones_g");
                                                         padre.hijos.add((Nodo)a);
                                                         padre.hijos.add((Nodo)b);
                                                         RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones_g",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones_g ::= instruccion_g 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Nodo padre = new Nodo("instrucciones_g");
                                                         padre.hijos.add((Nodo)a);
                                                         RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones_g",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion_fym ::= declaracion_funcion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_fym",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion_fym ::= declaracion_metodo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_fym",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametros ::= parametro 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo padre = new Nodo("parametros"); 
    padre.hijos.add((Nodo)a);
    RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametros ::= parametros coma parametro 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo padre = new Nodo("parametros"); 
    padre.hijos.add((Nodo)a);
    padre.hijos.add((Nodo)b);
    RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametro ::= tipo ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo padre = new Nodo("parametro"); 
    padre.hijos.add((Nodo)a);
    padre.hijos.add(new Nodo("ID", b));
    RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= res_ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=new Nodo("res_ENTERO",a); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= res_DOBLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=new Nodo("res_DOBLE",a); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= res_BINARIO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=new Nodo("res_BINARIO",a); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= res_CARACTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=new Nodo("res_CARACTER",a); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= res_CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=new Nodo("res_CADENA",a); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("instrucciones");
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)b);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instrucciones ::= instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("instrucciones");
padre.hijos.add((Nodo)a);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= declaracion_var 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= asignacion_var 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= actualizaciones prd_cma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= funcion_imprimir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= sentencia_selector 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= sentencia_si 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= sentencia_mientras 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= sentencia_para 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= sentencia_hacer 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= sentencia_cortar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= sentencia_continuar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= sentencia_retorno 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= llamada prd_cma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracion_var ::= tipo lista_variables equals expresion prd_cma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 
Nodo padre = new Nodo("declaracion_var");
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)b);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion_var ::= tipo lista_variables prd_cma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 
Nodo padre = new Nodo("declaracion_var");
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)b);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_variables ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
Nodo padre = new Nodo("lista_variables");
padre.hijos.add(new Nodo("ID",a));
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_variables ::= lista_variables coma ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("lista_variables");
padre.hijos.add((Nodo)a);
padre.hijos.add(new Nodo("ID",b));
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracion_metodo ::= res_VOID ID open_par parametros closed_par brack_open instrucciones brack_close 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo padre = new Nodo("declaracion_metodo"); 
    padre.hijos.add(new Nodo("ID", a));
    padre.hijos.add((Nodo)b);
    padre.hijos.add((Nodo)c);
    RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_metodo",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion_metodo ::= res_VOID ID open_par closed_par brack_open instrucciones brack_close 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo padre = new Nodo("declaracion_metodo"); 
    padre.hijos.add(new Nodo("ID", a));
    padre.hijos.add((Nodo)b);
    RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_metodo",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion plus expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion minus expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresion times expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= expresion div expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= expresion power expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= expresion mod expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= minus expresion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= expresion equalsequals expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= expresion diff expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= expresion lesser expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= expresion lesserequals expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= expresion greater expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion greaterequals expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion question expresion doublepoint expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
padre.hijos.add((Nodo)d);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresion orsign expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion andsign expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= notsign expresion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= open_par expresion closed_par 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 
Nodo padre = new Nodo("expresion"); 
padre.hijos.add((Nodo)a);
RESULT = padre;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (Nodo)a;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= llamada 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = (Nodo)a;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instruccion_g ::= declaracion_fym 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion_g",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instruccion_g ::= sentencia_ejecutar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion_g",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia_ejecutar ::= res_EJECUTAR llamada prd_cma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo padre = new Nodo("sentencia_ejecutar"); 
    padre.hijos.add((Nodo)a);
    RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_ejecutar",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // dato ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new Nodo("ID", a);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dato",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // dato ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new Nodo("ENTERO", a);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dato",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // dato ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new Nodo("CADENA", a);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dato",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // dato ::= CHARR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new Nodo("CHARR", a);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dato",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // dato ::= DECIMALES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new Nodo("DECIMALES", a);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dato",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // dato ::= res_VERDADERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new Nodo("res_VERDADERO", a);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dato",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // dato ::= res_FALSO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new Nodo("res_FALSO", a);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dato",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // asignacion_var ::= ID equals expresion prd_cma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 
Nodo padre = new Nodo("asignacion_var");
padre.hijos.add(new Nodo("ID", a));
padre.hijos.add((Nodo)b);
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion_var",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // actualizaciones ::= ID masmas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
Nodo padre = new Nodo("actualizaciones", b);
padre.hijos.add(new Nodo("ID",a));
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("actualizaciones",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // actualizaciones ::= ID menosmenos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
Nodo padre = new Nodo("actualizaciones", b);
padre.hijos.add(new Nodo("ID",a));
RESULT=padre; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("actualizaciones",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencia_si ::= res_SI open_par expresion closed_par brack_open instrucciones brack_close 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("sentencia_si");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencia_si ::= res_SI open_par expresion closed_par brack_open instrucciones brack_close res_SINO brack_open instrucciones brack_close 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("sentencia_si");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        padre.hijos.add((Nodo)c);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentencia_si ::= res_SI open_par expresion closed_par brack_open instrucciones brack_close res_SINO sentencia_si 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("sentencia_si");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        padre.hijos.add((Nodo)c);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentencia_selector ::= res_SELECTOR open_par expresion closed_par brack_open lista_casos defecto brack_close 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("sentencia_selector");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        padre.hijos.add((Nodo)c);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_selector",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentencia_selector ::= res_SELECTOR open_par expresion closed_par brack_open lista_casos brack_close 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("sentencia_selector");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_selector",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentencia_selector ::= res_SELECTOR open_par expresion closed_par brack_open defecto brack_close 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("sentencia_selector");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_selector",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // lista_casos ::= lista_casos caso 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("lista_casos");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_casos",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // lista_casos ::= caso 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=(Nodo)a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_casos",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // caso ::= res_CASO expresion doublepoint instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("caso");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("caso",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // defecto ::= res_PORDEFECTO doublepoint instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("defecto");
        padre.hijos.add((Nodo)a);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("defecto",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentencia_mientras ::= res_MIENTRAS open_par expresion closed_par brack_open instrucciones brack_close 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("sentencia_mientras");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencia_para ::= res_PARA open_par declaracion_var expresion prd_cma actualizaciones closed_par brack_open instrucciones brack_close 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("sentencia_para");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        padre.hijos.add((Nodo)c);
        padre.hijos.add((Nodo)d);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_para",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentencia_para ::= res_PARA open_par asignacion_var expresion prd_cma actualizaciones closed_par brack_open instrucciones brack_close 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("sentencia_para");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        padre.hijos.add((Nodo)c);
        padre.hijos.add((Nodo)d);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_para",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentencia_hacer ::= res_HACER brack_open instrucciones brack_close res_MIENTRAS open_par expresion closed_par prd_cma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
        Nodo padre = new Nodo("sentencia_hacer");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_hacer",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentencia_cortar ::= res_CORTAR prd_cma 
            {
              Object RESULT =null;
		
        Nodo padre = new Nodo("sentencia_cortar");
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_cortar",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentencia_continuar ::= res_CONTINUAR prd_cma 
            {
              Object RESULT =null;
		
        Nodo padre = new Nodo("sentencia_continuar");
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_continuar",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentencia_retorno ::= res_RETORNO prd_cma 
            {
              Object RESULT =null;
		
        Nodo padre = new Nodo("sentencia_retorno");
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_retorno",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentencia_retorno ::= res_RETORNO expresion prd_cma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("sentencia_retorno");
        padre.hijos.add((Nodo)a);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia_retorno",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declaracion_funcion ::= tipo ID open_par parametros closed_par brack_open instrucciones brack_close 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("declaracion_funcion");
        padre.hijos.add((Nodo)a);
        padre.hijos.add(new Nodo("ID",b));
        padre.hijos.add((Nodo)c);
        padre.hijos.add((Nodo)d);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // declaracion_funcion ::= tipo ID open_par closed_par brack_open instrucciones brack_close 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("declaracion_funcion");
        padre.hijos.add((Nodo)a);
        padre.hijos.add(new Nodo("ID",b));
        padre.hijos.add((Nodo)c);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // llamada ::= ID open_par parametros_llamada closed_par 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo padre = new Nodo("llamada");
        padre.hijos.add(new Nodo("ID",a));
        padre.hijos.add((Nodo)b);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamada",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // llamada ::= ID open_par closed_par 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
        Nodo padre = new Nodo("llamada");
        padre.hijos.add(new Nodo("ID",a));
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamada",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parametros_llamada ::= parametros_llamada coma expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("parametros_llamada");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros_llamada",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parametros_llamada ::= expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo padre = new Nodo("parametros_llamada");
        padre.hijos.add((Nodo)a);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros_llamada",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // funcion_imprimir ::= res_IMPRIMIR open_par expresion closed_par prd_cma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
        Nodo padre = new Nodo("funcion_imprimir");
        padre.hijos.add((Nodo)a);
        RESULT=padre;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funcion_imprimir",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
