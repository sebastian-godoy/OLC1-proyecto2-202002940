package Analizadores;
import java_cup.runtime.*;


parser code{:
public Interpreter Proyecto2Compi1;
:}


//Declarar terminales --------------------------------------------------------------------------------------------
terminal String open_par,
closed_par, 
brack_open, 
brack_close, 
prd_cma, 
times, 
plus, 
minus, 
div, 
mod, 
equals, 
greater, 
lesser, 
greaterequals, 
lesserequals, 
equalsequals, 
coma, 
diff, 
masmas, 
menosmenos, 
orsign, 
andsign, 
notsign, 
coropen, 
corclose, 
doublepoint, 
power, 
question, 
res_ENTERO, 
res_DOBLE, 
res_BINARIO, 
res_VERDADERO, 
res_FALSO, 
res_CARACTER, 
res_CADENA,
res_SI, 
res_SINO, 
res_IMPRIMIR, 
res_SELECTOR, 
res_CASO, 
res_PORDEFECTO, 
res_MIENTRAS, 
res_PARA, 
res_HACER, 
res_CORTAR, 
res_CONTINUAR, 
res_RETORNO, 
res_VOID, 
res_REDONDEO, 
res_TIPODE, 
res_ACADENA, 
res_LONGITUD, 
res_EJECUTAR, 
res_NUEVO, 
ENTERO, 
ID, 
CADENA, 
CHARR, 
DECIMALES;



//Declarar no terminales -------------------------------------------------------------------------------------------------------
non terminal instrucciones_g, 
instruccion_g, 
declaracion_fym, 
sentencia_ejecutar, 
declaracion_funcion, 
declaracion_metodo, 
instrucciones, 
parametros, 
instruccion, 
parametro, 
tipo, 
declaracion_var, 
asignacion_var, 
lista_variables, 
expresion, dato, 
actualizaciones, 
sentencia_si, 
sentencia_selector, 
caso, 
defecto, 
sentencia_mientras, 
sentencia_para, 
sentencia_hacer, 
sentencia_cortar, 
lista_casos, 
sentencia_continuar, 
sentencia_retorno, 
llamada, 
parametros_llamada, 
funcion_imprimir, 
programa;


//Orden de precedencia
precedence nonassoc equals;
precedence left orsign;
precedence left andsign;
precedence right notsign;
precedence right minus;
precedence left equalsequals, diff, lesser, lesserequals, greater, greaterequals;
precedence left plus, minus;
precedence left  div, times, mod;
precedence nonassoc power;
precedence nonassoc question;


start with programa;

programa ::= instrucciones_g:a {: 
Nodo x = (Nodo)a;
x.entorno = ""+x.hashCode();
Proyecto2Compi1= new Interpreter(x);:};

instrucciones_g ::= instrucciones_g:a instruccion_g:b {: Nodo padre = new Nodo("instrucciones_g");
                                                         padre.hijos.add((Nodo)a);
                                                         padre.hijos.add((Nodo)b);
                                                         RESULT=padre; :}
                    |instruccion_g:a {: Nodo padre = new Nodo("instrucciones_g");
                                                         padre.hijos.add((Nodo)a);
                                                         RESULT=padre; :};




declaracion_fym ::= declaracion_funcion:a {: RESULT=(Nodo)a; :}
| declaracion_metodo:a {: RESULT=(Nodo)a; :} ;



parametros ::= parametro:a {:
    Nodo padre = new Nodo("parametros"); 
    padre.hijos.add((Nodo)a);
    RESULT=padre;
:}
| parametros:a coma parametro:b {:
    Nodo padre = new Nodo("parametros"); 
    padre.hijos.add((Nodo)a);
    padre.hijos.add((Nodo)b);
    RESULT=padre;
:};

parametro ::= tipo:a ID:b{:
    Nodo padre = new Nodo("parametro"); 
    padre.hijos.add((Nodo)a);
    padre.hijos.add(new Nodo("ID", b));
    RESULT=padre;
:};

tipo ::= res_ENTERO:a {: RESULT=new Nodo("res_ENTERO",a); :} 
| res_DOBLE:a {: RESULT=new Nodo("res_DOBLE",a); :} 
| res_BINARIO:a {: RESULT=new Nodo("res_BINARIO",a); :} 
| res_CARACTER:a {: RESULT=new Nodo("res_CARACTER",a); :} 
| res_CADENA:a {: RESULT=new Nodo("res_CADENA",a); :} ;

instrucciones ::= instrucciones:a instruccion:b {: 
Nodo padre = new Nodo("instrucciones");
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)b);
RESULT=padre; :}
| instruccion:a {: 
Nodo padre = new Nodo("instrucciones");
padre.hijos.add((Nodo)a);
RESULT=padre; :};

instruccion ::= declaracion_var:a {: RESULT=(Nodo)a; :}
| asignacion_var:a {: RESULT=(Nodo)a; :}
| actualizaciones:a prd_cma {: RESULT=(Nodo)a; :}
| funcion_imprimir:a {: RESULT=(Nodo)a; :}
| sentencia_selector:a {: RESULT=(Nodo)a; :}
| sentencia_si:a {: RESULT=(Nodo)a; :}
| sentencia_mientras:a {: RESULT=(Nodo)a; :}
| sentencia_para:a {: RESULT=(Nodo)a; :}
| sentencia_hacer:a {: RESULT=(Nodo)a; :}
| sentencia_cortar:a {: RESULT=(Nodo)a; :}
| sentencia_continuar:a {: RESULT=(Nodo)a; :}
| sentencia_retorno:a {: RESULT=(Nodo)a; :}
| llamada:a prd_cma {: RESULT=(Nodo)a; :};

declaracion_var ::= tipo:a lista_variables:b equals expresion:c prd_cma {: 
Nodo padre = new Nodo("declaracion_var");
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)b);
padre.hijos.add((Nodo)c);
RESULT=padre; :}

| tipo:a lista_variables:b prd_cma {: 
Nodo padre = new Nodo("declaracion_var");
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)b);
RESULT=padre; :};

lista_variables ::= ID:a {:
Nodo padre = new Nodo("lista_variables");
padre.hijos.add(new Nodo("ID",a));
RESULT=padre; :}

| lista_variables:a coma ID:b {: 
Nodo padre = new Nodo("lista_variables");
padre.hijos.add((Nodo)a);
padre.hijos.add(new Nodo("ID",b));
RESULT=padre; :};

declaracion_metodo ::= res_VOID ID:a open_par parametros:b closed_par brack_open instrucciones:c brack_close{:
    Nodo padre = new Nodo("declaracion_metodo"); 
    padre.hijos.add(new Nodo("ID", a));
    padre.hijos.add((Nodo)b);
    padre.hijos.add((Nodo)c);
    RESULT=padre;
:}
| res_VOID ID:a open_par closed_par brack_open instrucciones:b brack_close{:
    Nodo padre = new Nodo("declaracion_metodo"); 
    padre.hijos.add(new Nodo("ID", a));
    padre.hijos.add((Nodo)b);
    RESULT=padre;
:};

expresion ::= expresion:a plus:b expresion:c {: 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; :}






| expresion:a minus:b expresion:c {: 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; :}






| expresion:a times:b expresion:c {: 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; :}



| expresion:a div:b expresion:c {: 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; :}





| expresion:a power:b expresion:c {: 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; :}




| expresion:a mod:b expresion:c {: 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; :}





| minus:b expresion:a{: 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
RESULT=padre; :}




| expresion:a equalsequals:b expresion:c {: 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; :}




| expresion:a diff:b expresion:c {: 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; :}







| expresion:a lesser:b expresion:c {: 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; :}







| expresion:a lesserequals:b expresion:c {: 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; :}





| expresion:a greater:b expresion:c {: 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; :}









| expresion:a greaterequals:b expresion:c {: 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; :}








| expresion:a question:b expresion:c doublepoint expresion:d {: 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
padre.hijos.add((Nodo)d);
RESULT=padre; :}




| expresion:a orsign:b expresion:c {: 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; :}





| expresion:a andsign:b expresion:c {: 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
padre.hijos.add((Nodo)c);
RESULT=padre; :}





| notsign:b expresion:a {: 
Nodo padre = new Nodo("expresion", b);
padre.hijos.add((Nodo)a);
RESULT=padre; :}






| open_par expresion:a closed_par {: 
Nodo padre = new Nodo("expresion"); 
padre.hijos.add((Nodo)a);
RESULT = padre;:}
| dato:a {:RESULT = (Nodo)a;:}
| llamada:a {:RESULT = (Nodo)a;:};



instruccion_g ::= declaracion_fym:a {: RESULT=(Nodo)a; :}
| sentencia_ejecutar:a {: RESULT=(Nodo)a; :} ;

sentencia_ejecutar ::= res_EJECUTAR llamada:a prd_cma {:
    Nodo padre = new Nodo("sentencia_ejecutar"); 
    padre.hijos.add((Nodo)a);
    RESULT=padre;
:};

dato ::= ID:a {:RESULT = new Nodo("ID", a);:}
| ENTERO:a {:RESULT = new Nodo("ENTERO", a);:}
| CADENA:a  {:RESULT = new Nodo("CADENA", a);:}
| CHARR:a  {:RESULT = new Nodo("CHARR", a);:}
| DECIMALES:a  {:RESULT = new Nodo("DECIMALES", a);:}
| res_VERDADERO:a  {:RESULT = new Nodo("res_VERDADERO", a);:}
| res_FALSO:a  {:RESULT = new Nodo("res_FALSO", a);:}; 

asignacion_var ::= ID:a equals expresion:b prd_cma{: 
Nodo padre = new Nodo("asignacion_var");
padre.hijos.add(new Nodo("ID", a));
padre.hijos.add((Nodo)b);
RESULT=padre; :};




// SEGUNDA MITAD ----------------------------------------------------------------------------------------------------------------------
actualizaciones ::= ID:a masmas:b {:
Nodo padre = new Nodo("actualizaciones", b);
padre.hijos.add(new Nodo("ID",a));
RESULT=padre; :}
| ID:a menosmenos:b {:
Nodo padre = new Nodo("actualizaciones", b);
padre.hijos.add(new Nodo("ID",a));
RESULT=padre; :};

sentencia_si ::= res_SI open_par expresion:a closed_par brack_open instrucciones:b brack_close {:
        Nodo padre = new Nodo("sentencia_si");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;
:}
| res_SI open_par expresion:a closed_par brack_open instrucciones:b brack_close res_SINO brack_open instrucciones:c brack_close {:
        Nodo padre = new Nodo("sentencia_si");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        padre.hijos.add((Nodo)c);
        RESULT=padre;
:}
| res_SI open_par expresion:a closed_par brack_open instrucciones:b brack_close res_SINO sentencia_si:c {:
        Nodo padre = new Nodo("sentencia_si");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        padre.hijos.add((Nodo)c);
        RESULT=padre;
:};

sentencia_selector ::= res_SELECTOR open_par expresion:a closed_par brack_open lista_casos:b defecto:c brack_close {:
        Nodo padre = new Nodo("sentencia_selector");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        padre.hijos.add((Nodo)c);
        RESULT=padre;
:}
| res_SELECTOR open_par expresion:a closed_par brack_open lista_casos:b brack_close {:
        Nodo padre = new Nodo("sentencia_selector");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;
:}
| res_SELECTOR open_par expresion:a closed_par brack_open defecto:b brack_close {:
        Nodo padre = new Nodo("sentencia_selector");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;
:};

lista_casos ::= lista_casos:a caso:b {:
        Nodo padre = new Nodo("lista_casos");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;
:}
| caso:a {: RESULT=(Nodo)a; :};

caso ::= res_CASO expresion:a doublepoint instrucciones:b {:
        Nodo padre = new Nodo("caso");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;
:};

defecto ::= res_PORDEFECTO doublepoint instrucciones:a {:
        Nodo padre = new Nodo("defecto");
        padre.hijos.add((Nodo)a);
        RESULT=padre;
:};





sentencia_mientras ::= res_MIENTRAS open_par expresion:a closed_par brack_open instrucciones:b brack_close {:
        Nodo padre = new Nodo("sentencia_mientras");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;
:};




sentencia_para ::= res_PARA open_par declaracion_var:a expresion:b prd_cma actualizaciones:c closed_par brack_open instrucciones:d brack_close {:
        Nodo padre = new Nodo("sentencia_para");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        padre.hijos.add((Nodo)c);
        padre.hijos.add((Nodo)d);
        RESULT=padre;
:}
| res_PARA open_par asignacion_var:a expresion:b prd_cma actualizaciones:c closed_par brack_open instrucciones:d brack_close {:
        Nodo padre = new Nodo("sentencia_para");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        padre.hijos.add((Nodo)c);
        padre.hijos.add((Nodo)d);
        RESULT=padre;
:};





sentencia_hacer ::= res_HACER brack_open instrucciones:a brack_close res_MIENTRAS open_par expresion:b closed_par prd_cma {:
        Nodo padre = new Nodo("sentencia_hacer");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;
:};

sentencia_cortar ::= res_CORTAR prd_cma {:
        Nodo padre = new Nodo("sentencia_cortar");
        RESULT=padre;
:};





sentencia_continuar ::= res_CONTINUAR prd_cma {:
        Nodo padre = new Nodo("sentencia_continuar");
        RESULT=padre;
:};

sentencia_retorno ::= res_RETORNO prd_cma {:
        Nodo padre = new Nodo("sentencia_retorno");
        RESULT=padre;
:}
| res_RETORNO expresion:a prd_cma {:
        Nodo padre = new Nodo("sentencia_retorno");
        padre.hijos.add((Nodo)a);
        RESULT=padre;
:};





declaracion_funcion ::= tipo:a ID:b open_par parametros:c closed_par brack_open instrucciones:d brack_close {:
        Nodo padre = new Nodo("declaracion_funcion");
        padre.hijos.add((Nodo)a);
        padre.hijos.add(new Nodo("ID",b));
        padre.hijos.add((Nodo)c);
        padre.hijos.add((Nodo)d);
        RESULT=padre;
:}
| tipo:a ID:b open_par closed_par brack_open instrucciones:c brack_close {:
        Nodo padre = new Nodo("declaracion_funcion");
        padre.hijos.add((Nodo)a);
        padre.hijos.add(new Nodo("ID",b));
        padre.hijos.add((Nodo)c);
        RESULT=padre;
:};




llamada ::= ID:a open_par parametros_llamada:b closed_par {:
        Nodo padre = new Nodo("llamada");
        padre.hijos.add(new Nodo("ID",a));
        padre.hijos.add((Nodo)b);
        RESULT=padre;
:}
| ID:a open_par closed_par {:
        Nodo padre = new Nodo("llamada");
        padre.hijos.add(new Nodo("ID",a));
        RESULT=padre;
:};




parametros_llamada ::= parametros_llamada:a coma expresion:b {:
        Nodo padre = new Nodo("parametros_llamada");
        padre.hijos.add((Nodo)a);
        padre.hijos.add((Nodo)b);
        RESULT=padre;
:}
| expresion:a {:
        Nodo padre = new Nodo("parametros_llamada");
        padre.hijos.add((Nodo)a);
        RESULT=padre;
:};




funcion_imprimir ::= res_IMPRIMIR open_par expresion:a closed_par prd_cma {:
        Nodo padre = new Nodo("funcion_imprimir");
        padre.hijos.add((Nodo)a);
        RESULT=padre;
:};