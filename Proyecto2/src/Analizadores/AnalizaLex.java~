/* The following code was generated by JFlex 1.7.0 */

package analizadores;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/Analizadores/AnalizadorLexico</tt>
 */
public class AnalizaLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 51,  4,  5,  4,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    51, 23,  8,  0,  0, 18, 24, 10, 11, 12,  6, 16, 22, 17,  9,  3, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 28, 15, 21, 19, 20, 30, 
     0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 26,  7, 27, 29,  2, 
     0, 40, 37, 44, 36, 31, 42, 49, 47, 39, 50,  2, 38, 45, 32, 35, 
    46,  2, 34, 43, 33, 48, 41,  2,  2,  2,  2, 13, 25, 14,  0,  0, 
     0,  0,  0,  0,  0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\2\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\2\1\1\24\1\25"+
    "\1\26\1\27\1\30\20\3\1\0\1\31\3\0\1\32"+
    "\2\0\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\16\3\1\43\6\3\1\44\1\0\1\32\2\45"+
    "\31\3\1\31\14\3\1\46\2\3\1\47\4\3\1\50"+
    "\2\3\1\51\3\3\1\52\3\3\1\53\5\3\1\54"+
    "\7\3\1\55\1\56\1\3\1\57\11\3\1\60\1\3"+
    "\1\61\3\3\1\62\1\3\1\63\2\3\1\64\6\3"+
    "\1\65\1\66\1\67\1\70\1\3\1\71\1\3\1\72"+
    "\1\73\1\3\1\74\1\75\1\3\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\64\0\64\0\u0104"+
    "\0\u0138\0\64\0\64\0\64\0\64\0\64\0\u016c\0\u01a0"+
    "\0\64\0\u01d4\0\u0208\0\u023c\0\64\0\u0270\0\u02a4\0\u02d8"+
    "\0\64\0\64\0\64\0\64\0\64\0\u030c\0\u0340\0\u0374"+
    "\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514"+
    "\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4"+
    "\0\u0104\0\u06e8\0\64\0\u071c\0\u0750\0\64\0\64\0\64"+
    "\0\64\0\64\0\64\0\64\0\64\0\u0784\0\u07b8\0\u07ec"+
    "\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c"+
    "\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c"+
    "\0\u0b60\0\u0b94\0\u064c\0\u0bc8\0\u0104\0\64\0\u071c\0\u0bfc"+
    "\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c"+
    "\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c"+
    "\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc"+
    "\0\64\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248"+
    "\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c\0\234\0\u1380\0\u13b4"+
    "\0\234\0\u13e8\0\u141c\0\u1450\0\u1484\0\234\0\u14b8\0\u14ec"+
    "\0\234\0\u1520\0\u1554\0\u1588\0\234\0\u15bc\0\u15f0\0\u1624"+
    "\0\234\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\234\0\u175c"+
    "\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894\0\234\0\234"+
    "\0\u18c8\0\234\0\u18fc\0\u1930\0\u1964\0\u1998\0\u19cc\0\u1a00"+
    "\0\u1a34\0\u1a68\0\u1a9c\0\234\0\u1ad0\0\234\0\u1b04\0\u1b38"+
    "\0\u1b6c\0\234\0\u1ba0\0\234\0\u1bd4\0\u1c08\0\234\0\u1c3c"+
    "\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\234\0\234\0\234"+
    "\0\234\0\u1d74\0\234\0\u1da8\0\234\0\234\0\u1ddc\0\234"+
    "\0\234\0\u1e10\0\234";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\0\1\7\1\2"+
    "\1\10\1\2\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\4\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\3\4\1\6\65\0\1\3\7\0\1\56\53\0\2\4"+
    "\34\0\24\4\4\0\1\57\2\0\1\60\55\0\7\61"+
    "\1\62\1\63\53\61\4\64\2\0\1\64\1\65\54\64"+
    "\20\0\1\66\64\0\1\67\65\0\1\70\63\0\1\71"+
    "\63\0\1\72\63\0\1\73\70\0\1\74\64\0\1\75"+
    "\33\0\2\4\34\0\1\4\1\76\21\4\1\77\2\0"+
    "\2\4\34\0\21\4\1\100\2\4\2\0\2\4\34\0"+
    "\10\4\1\101\13\4\2\0\2\4\34\0\1\102\23\4"+
    "\2\0\2\4\34\0\4\4\1\103\17\4\2\0\2\4"+
    "\34\0\10\4\1\104\13\4\2\0\2\4\34\0\4\4"+
    "\1\105\17\4\2\0\2\4\34\0\16\4\1\106\5\4"+
    "\2\0\2\4\34\0\15\4\1\107\6\4\2\0\2\4"+
    "\34\0\1\110\3\4\1\111\17\4\2\0\2\4\34\0"+
    "\11\4\1\112\12\4\2\0\2\4\34\0\1\113\7\4"+
    "\1\114\13\4\2\0\2\4\34\0\4\4\1\115\4\4"+
    "\1\116\12\4\2\0\2\4\34\0\10\4\1\117\13\4"+
    "\2\0\2\4\34\0\4\4\1\120\4\4\1\121\12\4"+
    "\2\0\2\4\34\0\11\4\1\122\12\4\2\0\1\123"+
    "\62\0\4\57\2\0\56\57\6\60\1\124\55\60\7\61"+
    "\1\62\1\125\53\61\12\0\1\126\51\0\4\64\2\0"+
    "\4\64\1\127\51\64\1\0\2\4\34\0\2\4\1\130"+
    "\21\4\2\0\2\4\34\0\1\131\23\4\2\0\2\4"+
    "\34\0\1\132\23\4\2\0\2\4\34\0\17\4\1\133"+
    "\4\4\2\0\2\4\34\0\2\4\1\134\2\4\1\135"+
    "\16\4\2\0\2\4\34\0\6\4\1\136\15\4\2\0"+
    "\2\4\34\0\1\4\1\137\22\4\2\0\2\4\34\0"+
    "\1\4\1\140\22\4\2\0\2\4\34\0\17\4\1\141"+
    "\4\4\2\0\2\4\34\0\11\4\1\142\12\4\2\0"+
    "\2\4\34\0\3\4\1\143\20\4\2\0\2\4\34\0"+
    "\10\4\1\144\13\4\2\0\2\4\34\0\7\4\1\145"+
    "\14\4\2\0\2\4\34\0\7\4\1\146\14\4\2\0"+
    "\2\4\34\0\1\4\1\147\22\4\2\0\2\4\34\0"+
    "\1\4\1\150\1\4\1\151\20\4\2\0\2\4\34\0"+
    "\3\4\1\152\1\4\1\153\6\4\1\154\7\4\2\0"+
    "\2\4\34\0\1\155\23\4\2\0\2\4\34\0\3\4"+
    "\1\156\20\4\2\0\2\4\34\0\3\4\1\157\20\4"+
    "\2\0\2\4\34\0\15\4\1\160\6\4\4\0\1\161"+
    "\61\0\2\4\34\0\1\162\23\4\2\0\2\4\34\0"+
    "\15\4\1\163\6\4\2\0\2\4\34\0\12\4\1\164"+
    "\11\4\2\0\2\4\34\0\4\4\1\165\17\4\2\0"+
    "\2\4\34\0\4\4\1\166\17\4\2\0\2\4\34\0"+
    "\4\4\1\167\17\4\2\0\2\4\34\0\7\4\1\170"+
    "\14\4\2\0\2\4\34\0\11\4\1\171\12\4\2\0"+
    "\2\4\34\0\22\4\1\172\1\4\2\0\2\4\34\0"+
    "\3\4\1\173\20\4\2\0\2\4\34\0\5\4\1\174"+
    "\16\4\2\0\2\4\34\0\5\4\1\175\16\4\2\0"+
    "\2\4\34\0\5\4\1\176\16\4\2\0\2\4\34\0"+
    "\14\4\1\177\7\4\2\0\2\4\34\0\1\200\23\4"+
    "\2\0\2\4\34\0\4\4\1\201\17\4\2\0\2\4"+
    "\34\0\2\4\1\202\21\4\2\0\2\4\34\0\2\4"+
    "\1\203\21\4\2\0\2\4\34\0\11\4\1\204\12\4"+
    "\2\0\2\4\34\0\1\205\23\4\2\0\2\4\34\0"+
    "\4\4\1\206\17\4\2\0\2\4\34\0\1\4\1\207"+
    "\22\4\2\0\2\4\34\0\5\4\1\210\16\4\2\0"+
    "\2\4\34\0\11\4\1\211\12\4\2\0\2\4\34\0"+
    "\1\212\23\4\2\0\2\4\34\0\3\4\1\213\20\4"+
    "\2\0\2\4\34\0\21\4\1\214\2\4\2\0\2\4"+
    "\34\0\4\4\1\215\17\4\2\0\2\4\34\0\5\4"+
    "\1\216\16\4\2\0\2\4\34\0\3\4\1\217\20\4"+
    "\2\0\2\4\34\0\1\4\1\220\22\4\2\0\2\4"+
    "\34\0\1\221\23\4\2\0\2\4\34\0\3\4\1\222"+
    "\20\4\2\0\2\4\34\0\10\4\1\223\13\4\2\0"+
    "\2\4\34\0\10\4\1\224\13\4\2\0\2\4\34\0"+
    "\1\225\23\4\2\0\2\4\34\0\11\4\1\226\12\4"+
    "\2\0\2\4\34\0\4\4\1\227\17\4\2\0\2\4"+
    "\34\0\15\4\1\230\6\4\2\0\2\4\34\0\10\4"+
    "\1\231\13\4\2\0\2\4\34\0\11\4\1\232\12\4"+
    "\2\0\2\4\34\0\15\4\1\233\6\4\2\0\2\4"+
    "\34\0\1\4\1\234\22\4\2\0\2\4\34\0\2\4"+
    "\1\235\21\4\2\0\2\4\34\0\1\236\23\4\2\0"+
    "\2\4\34\0\3\4\1\237\20\4\2\0\2\4\34\0"+
    "\4\4\1\240\17\4\2\0\2\4\34\0\2\4\1\241"+
    "\21\4\2\0\2\4\34\0\1\242\23\4\2\0\2\4"+
    "\34\0\1\4\1\243\22\4\2\0\2\4\34\0\5\4"+
    "\1\244\16\4\2\0\2\4\34\0\10\4\1\245\13\4"+
    "\2\0\2\4\34\0\2\4\1\246\21\4\2\0\2\4"+
    "\34\0\16\4\1\247\5\4\2\0\2\4\34\0\1\4"+
    "\1\250\22\4\2\0\2\4\34\0\5\4\1\251\16\4"+
    "\2\0\2\4\34\0\2\4\1\252\21\4\2\0\2\4"+
    "\34\0\1\4\1\253\22\4\2\0\2\4\34\0\3\4"+
    "\1\254\20\4\2\0\2\4\34\0\2\4\1\255\21\4"+
    "\2\0\2\4\34\0\11\4\1\256\12\4\2\0\2\4"+
    "\34\0\3\4\1\257\20\4\2\0\2\4\34\0\13\4"+
    "\1\260\10\4\2\0\2\4\34\0\11\4\1\261\12\4"+
    "\2\0\2\4\34\0\4\4\1\262\17\4\2\0\2\4"+
    "\34\0\1\263\23\4\2\0\2\4\34\0\4\4\1\264"+
    "\17\4\2\0\2\4\34\0\21\4\1\265\2\4\2\0"+
    "\2\4\34\0\10\4\1\266\13\4\2\0\2\4\34\0"+
    "\11\4\1\267\12\4\2\0\2\4\34\0\1\270\23\4"+
    "\2\0\2\4\34\0\4\4\1\271\17\4\2\0\2\4"+
    "\34\0\21\4\1\272\2\4\2\0\2\4\34\0\1\273"+
    "\23\4\2\0\2\4\34\0\11\4\1\274\12\4\2\0"+
    "\2\4\34\0\1\275\23\4\2\0\2\4\34\0\3\4"+
    "\1\276\20\4\2\0\2\4\34\0\4\4\1\277\17\4"+
    "\2\0\2\4\34\0\5\4\1\300\16\4\2\0\2\4"+
    "\34\0\3\4\1\301\20\4\2\0\2\4\34\0\3\4"+
    "\1\302\20\4\2\0\2\4\34\0\3\4\1\303\20\4"+
    "\2\0\2\4\34\0\11\4\1\304\12\4\2\0\2\4"+
    "\34\0\3\4\1\305\20\4\2\0\2\4\34\0\14\4"+
    "\1\306\7\4\2\0\2\4\34\0\15\4\1\307\6\4"+
    "\2\0\2\4\34\0\4\4\1\310\17\4\2\0\2\4"+
    "\34\0\3\4\1\311\20\4\2\0\2\4\34\0\2\4"+
    "\1\312\21\4\2\0\2\4\34\0\4\4\1\313\17\4"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7748];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\2\1\5\11\2\1\1\11"+
    "\3\1\1\11\3\1\5\11\20\1\1\0\1\1\3\0"+
    "\1\11\2\0\10\11\26\1\1\0\1\1\1\11\32\1"+
    "\1\11\132\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizaLex(java.io.Reader in) {
      yyline = 0;
    yychar = 0;
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico: " + yytext() + " | Fila:" + yyline + " | Columna: " + yycolumn);
            } 
            // fall through
          case 63: break;
          case 2: 
            { System.out.println("ENTERO");  
                    return new Symbol(sym.ENTERO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 64: break;
          case 3: 
            { System.out.println("ID");  
                    return new Symbol(sym.ID, yycolumn, yyline, yytext());
            } 
            // fall through
          case 65: break;
          case 4: 
            { System.out.println("SIGNODIVISION");  
                    return new Symbol(sym.SIGNODIVISION, yycolumn, yyline, yytext());
            } 
            // fall through
          case 66: break;
          case 5: 
            { /* Espacios en blanco se ignoran */
            } 
            // fall through
          case 67: break;
          case 6: 
            { System.out.println("SIGNOPOR");  
                    return new Symbol(sym.SIGNOPOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 68: break;
          case 7: 
            { System.out.println("PARENTESISABRE");
                    return new Symbol(sym.PARENTESISABRE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 69: break;
          case 8: 
            { System.out.println("PARENTESISCIERRA");  
                    return new Symbol(sym.PARENTESISCIERRA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 70: break;
          case 9: 
            { System.out.println("LLAVEABRE");  
                    return new Symbol(sym.LLAVEABRE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 71: break;
          case 10: 
            { System.out.println("LLAVECIERRA");  
                    return new Symbol(sym.LLAVECIERRA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 72: break;
          case 11: 
            { System.out.println("PUNTOYCOMA");  
                    return new Symbol(sym.PUNTOYCOMA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 73: break;
          case 12: 
            { System.out.println("SIGNOMAS");  
                    return new Symbol(sym.SIGNOMAS, yycolumn, yyline, yytext());
            } 
            // fall through
          case 74: break;
          case 13: 
            { System.out.println("SIGNOMENOS");  
                    return new Symbol(sym.SIGNOMENOS, yycolumn, yyline, yytext());
            } 
            // fall through
          case 75: break;
          case 14: 
            { System.out.println("SIGNOMODULO");  
                    return new Symbol(sym.SIGNOMODULO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 76: break;
          case 15: 
            { System.out.println("SIGNOIGUAL");  
                    return new Symbol(sym.SIGNOIGUAL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 77: break;
          case 16: 
            { System.out.println("SIGNOMAYOR");  
                    return new Symbol(sym.SIGNOMAYOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 78: break;
          case 17: 
            { System.out.println("SIGNOMENOR");  
                    return new Symbol(sym.SIGNOMENOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 79: break;
          case 18: 
            { System.out.println("SIGNOCOMA");  
                    return new Symbol(sym.SIGNOCOMA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 19: 
            { System.out.println("SIGNONOT");  
                    return new Symbol(sym.SIGNONOT, yycolumn, yyline, yytext());
            } 
            // fall through
          case 81: break;
          case 20: 
            { System.out.println("CORCHETEABRE");  
                    return new Symbol(sym.CORCHETEABRE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 82: break;
          case 21: 
            { System.out.println("CORCHETECIERRA");  
                    return new Symbol(sym.CORCHETECIERRA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 22: 
            { System.out.println("DOSPUNTOS");  
                    return new Symbol(sym.DOSPUNTOS, yycolumn, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 23: 
            { System.out.println("SIGNOPOTENCIA");  
                    return new Symbol(sym.SIGNOPOTENCIA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 24: 
            { System.out.println("SIGNOINTERROGACION");  
                    return new Symbol(sym.SIGNOINTERROGACION, yycolumn, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 25: 
            { 
            } 
            // fall through
          case 87: break;
          case 26: 
            { System.out.println("CADENA");  
                    return new Symbol(sym.CADENA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 27: 
            { System.out.println("SIGNOINCREMENTO");  
                    return new Symbol(sym.SIGNOINCREMENTO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 28: 
            { System.out.println("SIGNODECREMENTO");  
                    return new Symbol(sym.SIGNODECREMENTO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 29: 
            { System.out.println("SIGNOIGUALIGUAL");  
                    return new Symbol(sym.SIGNOIGUALIGUAL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 30: 
            { System.out.println("SIGNOMAYORIGUAL");  
                    return new Symbol(sym.SIGNOMAYORIGUAL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 31: 
            { System.out.println("SIGNOMENORIGUAL");  
                    return new Symbol(sym.SIGNOMENORIGUAL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 32: 
            { System.out.println("SIGNODIFERENTE");  
                    return new Symbol(sym.SIGNODIFERENTE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 33: 
            { System.out.println("SIGNOAND");  
                    return new Symbol(sym.SIGNOAND, yycolumn, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 34: 
            { System.out.println("SIGNOOR");  
                    return new Symbol(sym.SIGNOOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 35: 
            { System.out.println("RESERVADA_SI");  
                    return new Symbol(sym.RESERVADA_SI, yycolumn, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 36: 
            { System.out.println("DECIMALES");   
                    return new Symbol(sym.DECIMALES, yycolumn, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 37: 
            { System.out.println("CHARR");  
                    return new Symbol(sym.CHARR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 38: 
            { System.out.println("RESERVADA_VOID");  
                    return new Symbol(sym.RESERVADA_VOID, yycolumn, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 39: 
            { System.out.println("RESERVADA_SINO");  
                    return new Symbol(sym.RESERVADA_SINO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 40: 
            { System.out.println("RESERVADA_CASO");  
                    return new Symbol(sym.RESERVADA_CASO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 41: 
            { System.out.println("RESERVADA_PARA");  
                    return new Symbol(sym.RESERVADA_PARA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 42: 
            { System.out.println("RESERVADA_NUEVO");
                    return new Symbol(sym.RESERVADA_NUEVO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 43: 
            { System.out.println("RESERVADA_DOBLE");  
                    return new Symbol(sym.RESERVADA_DOBLE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 44: 
            { System.out.println("RESERVADA_FALSO");  
                    return new Symbol(sym.RESERVADA_FALSO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 106: break;
          case 45: 
            { System.out.println("RESERVADA_HACER");  
                    return new Symbol(sym.RESERVADA_HACER, yycolumn, yyline, yytext());
            } 
            // fall through
          case 107: break;
          case 46: 
            { System.out.println("RESERVADA_ENTERO");  
                    return new Symbol(sym.RESERVADA_ENTERO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 108: break;
          case 47: 
            { System.out.println("RESERVADA_TIPODE");   
                    return new Symbol(sym.RESERVADA_TIPODE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 109: break;
          case 48: 
            { System.out.println("RESERVADA_CORTAR");  
                    return new Symbol(sym.RESERVADA_CORTAR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 110: break;
          case 49: 
            { System.out.println("RESERVADA_CADENA");  
                    return new Symbol(sym.RESERVADA_CADENA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 50: 
            { System.out.println("RESERVADA_RETORNO");  
                    return new Symbol(sym.RESERVADA_RETORNO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 112: break;
          case 51: 
            { System.out.println("RESERVADA_BINARIO");  
                    return new Symbol(sym.RESERVADA_BINARIO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 113: break;
          case 52: 
            { System.out.println("RESERVADA_ACADENA");  
                    return new Symbol(sym.RESERVADA_ACADENA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 114: break;
          case 53: 
            { System.out.println("RESERVADA_EJECUTAR"); 
                    return new Symbol(sym.RESERVADA_EJECUTAR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 115: break;
          case 54: 
            { System.out.println("RESERVADA_REDONDEO");  
                    return new Symbol(sym.RESERVADA_REDONDEO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 55: 
            { System.out.println("RESERVADA_LONGITUD");  
                    return new Symbol(sym.RESERVADA_LONGITUD, yycolumn, yyline, yytext());
            } 
            // fall through
          case 117: break;
          case 56: 
            { System.out.println("RESERVADA_IMPRIMIR");  
                    return new Symbol(sym.RESERVADA_IMPRIMIR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 57: 
            { System.out.println("RESERVADA_SELECTOR");  
                    return new Symbol(sym.RESERVADA_SELECTOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 58: 
            { System.out.println("RESERVADA_CARACTER");  
                    return new Symbol(sym.RESERVADA_CARACTER, yycolumn, yyline, yytext());
            } 
            // fall through
          case 120: break;
          case 59: 
            { System.out.println("RESERVADA_MIENTRAS");  
                    return new Symbol(sym.RESERVADA_MIENTRAS, yycolumn, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 60: 
            { System.out.println("RESERVADA_VERDADERO");  
                    return new Symbol(sym.RESERVADA_VERDADERO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 122: break;
          case 61: 
            { System.out.println("RESERVADA_CONTINUAR");  
                    return new Symbol(sym.RESERVADA_CONTINUAR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 62: 
            { System.out.println("RESERVADA_PORDEFECTO");  
                    return new Symbol(sym.RESERVADA_PORDEFECTO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 124: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
