/* The following code was generated by JFlex 1.7.0 */

package Analizadores;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/Analizadores/AnalizadorLexico</tt>
 */
public class AnalizaLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 51,  4,  5,  4,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    51, 19,  2,  0,  0, 27, 20,  7, 28, 29, 10, 17, 14, 18,  6,  9, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 24, 16, 13, 12, 11, 26, 
     0,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 
     8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 22,  3, 23, 25,  8, 
     0, 40, 37, 44, 36, 31, 42, 49, 47, 39, 50,  8, 38, 45, 32, 35, 
    46,  8, 34, 43, 33, 48, 41,  8,  8,  8,  8, 30, 21, 15,  0,  0, 
     0,  0,  0,  0,  0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\2\1\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\20\4\2\0\1\31\2\0\1\32"+
    "\1\0\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\16\4\1\43\6\4\1\44\1\31\1\45\1\0"+
    "\31\4\1\32\14\4\1\46\2\4\1\47\4\4\1\50"+
    "\2\4\1\51\3\4\1\52\3\4\1\53\5\4\1\54"+
    "\7\4\1\55\1\56\1\4\1\57\11\4\1\60\1\4"+
    "\1\61\3\4\1\62\1\4\1\63\2\4\1\64\6\4"+
    "\1\65\1\66\1\67\1\70\1\4\1\71\1\4\1\72"+
    "\1\73\1\4\1\74\1\75\1\4\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\64\0\u0104\0\u0138"+
    "\0\64\0\u016c\0\u01a0\0\u01d4\0\64\0\64\0\64\0\u0208"+
    "\0\u023c\0\u0270\0\u02a4\0\u02d8\0\64\0\64\0\64\0\64"+
    "\0\64\0\64\0\64\0\64\0\64\0\u030c\0\u0340\0\u0374"+
    "\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514"+
    "\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c\0\234\0\64"+
    "\0\u0680\0\u06b4\0\u06e8\0\u071c\0\64\0\64\0\64\0\64"+
    "\0\64\0\64\0\64\0\64\0\u0750\0\u0784\0\u07b8\0\u07ec"+
    "\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c"+
    "\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c"+
    "\0\u0b60\0\u064c\0\234\0\64\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30"+
    "\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0"+
    "\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70"+
    "\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\64\0\u10dc"+
    "\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c"+
    "\0\u12b0\0\u12e4\0\u1318\0\u0104\0\u134c\0\u1380\0\u0104\0\u13b4"+
    "\0\u13e8\0\u141c\0\u1450\0\u0104\0\u1484\0\u14b8\0\u0104\0\u14ec"+
    "\0\u1520\0\u1554\0\u0104\0\u1588\0\u15bc\0\u15f0\0\u0104\0\u1624"+
    "\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u0104\0\u1728\0\u175c\0\u1790"+
    "\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u0104\0\u0104\0\u1894\0\u0104"+
    "\0\u18c8\0\u18fc\0\u1930\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34"+
    "\0\u1a68\0\u0104\0\u1a9c\0\u0104\0\u1ad0\0\u1b04\0\u1b38\0\u0104"+
    "\0\u1b6c\0\u0104\0\u1ba0\0\u1bd4\0\u0104\0\u1c08\0\u1c3c\0\u1c70"+
    "\0\u1ca4\0\u1cd8\0\u1d0c\0\u0104\0\u0104\0\u0104\0\u0104\0\u1d40"+
    "\0\u0104\0\u1d74\0\u0104\0\u0104\0\u1da8\0\u0104\0\u0104\0\u1ddc"+
    "\0\u0104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\0\1\2\1\5"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\7\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\3\7\1\6\65\0\1\3\4\0\1\56\55\0\2\57"+
    "\1\60\1\61\60\57\4\62\2\0\56\62\1\0\1\7"+
    "\6\0\1\7\26\0\24\7\12\0\1\63\1\64\65\0"+
    "\1\65\63\0\1\66\63\0\1\67\70\0\1\70\64\0"+
    "\1\71\55\0\1\72\73\0\1\73\64\0\1\74\37\0"+
    "\1\7\6\0\1\7\26\0\1\7\1\75\21\7\1\76"+
    "\2\0\1\7\6\0\1\7\26\0\21\7\1\77\2\7"+
    "\2\0\1\7\6\0\1\7\26\0\10\7\1\100\13\7"+
    "\2\0\1\7\6\0\1\7\26\0\1\101\23\7\2\0"+
    "\1\7\6\0\1\7\26\0\4\7\1\102\17\7\2\0"+
    "\1\7\6\0\1\7\26\0\10\7\1\103\13\7\2\0"+
    "\1\7\6\0\1\7\26\0\4\7\1\104\17\7\2\0"+
    "\1\7\6\0\1\7\26\0\16\7\1\105\5\7\2\0"+
    "\1\7\6\0\1\7\26\0\15\7\1\106\6\7\2\0"+
    "\1\7\6\0\1\7\26\0\1\107\3\7\1\110\17\7"+
    "\2\0\1\7\6\0\1\7\26\0\11\7\1\111\12\7"+
    "\2\0\1\7\6\0\1\7\26\0\1\112\7\7\1\113"+
    "\13\7\2\0\1\7\6\0\1\7\26\0\4\7\1\114"+
    "\4\7\1\115\12\7\2\0\1\7\6\0\1\7\26\0"+
    "\10\7\1\116\13\7\2\0\1\7\6\0\1\7\26\0"+
    "\4\7\1\117\4\7\1\120\12\7\2\0\1\7\6\0"+
    "\1\7\26\0\11\7\1\121\12\7\2\0\1\122\62\0"+
    "\2\57\1\123\1\61\60\57\7\0\1\124\54\0\4\63"+
    "\2\0\56\63\12\64\1\125\51\64\1\0\1\7\6\0"+
    "\1\7\26\0\2\7\1\126\21\7\2\0\1\7\6\0"+
    "\1\7\26\0\1\127\23\7\2\0\1\7\6\0\1\7"+
    "\26\0\1\130\23\7\2\0\1\7\6\0\1\7\26\0"+
    "\17\7\1\131\4\7\2\0\1\7\6\0\1\7\26\0"+
    "\2\7\1\132\2\7\1\133\16\7\2\0\1\7\6\0"+
    "\1\7\26\0\6\7\1\134\15\7\2\0\1\7\6\0"+
    "\1\7\26\0\1\7\1\135\22\7\2\0\1\7\6\0"+
    "\1\7\26\0\1\7\1\136\22\7\2\0\1\7\6\0"+
    "\1\7\26\0\17\7\1\137\4\7\2\0\1\7\6\0"+
    "\1\7\26\0\11\7\1\140\12\7\2\0\1\7\6\0"+
    "\1\7\26\0\3\7\1\141\20\7\2\0\1\7\6\0"+
    "\1\7\26\0\10\7\1\142\13\7\2\0\1\7\6\0"+
    "\1\7\26\0\7\7\1\143\14\7\2\0\1\7\6\0"+
    "\1\7\26\0\7\7\1\144\14\7\2\0\1\7\6\0"+
    "\1\7\26\0\1\7\1\145\22\7\2\0\1\7\6\0"+
    "\1\7\26\0\1\7\1\146\1\7\1\147\20\7\2\0"+
    "\1\7\6\0\1\7\26\0\3\7\1\150\1\7\1\151"+
    "\6\7\1\152\7\7\2\0\1\7\6\0\1\7\26\0"+
    "\1\153\23\7\2\0\1\7\6\0\1\7\26\0\3\7"+
    "\1\154\20\7\2\0\1\7\6\0\1\7\26\0\3\7"+
    "\1\155\20\7\2\0\1\7\6\0\1\7\26\0\15\7"+
    "\1\156\6\7\12\0\1\157\53\0\1\7\6\0\1\7"+
    "\26\0\1\160\23\7\2\0\1\7\6\0\1\7\26\0"+
    "\15\7\1\161\6\7\2\0\1\7\6\0\1\7\26\0"+
    "\12\7\1\162\11\7\2\0\1\7\6\0\1\7\26\0"+
    "\4\7\1\163\17\7\2\0\1\7\6\0\1\7\26\0"+
    "\4\7\1\164\17\7\2\0\1\7\6\0\1\7\26\0"+
    "\4\7\1\165\17\7\2\0\1\7\6\0\1\7\26\0"+
    "\7\7\1\166\14\7\2\0\1\7\6\0\1\7\26\0"+
    "\11\7\1\167\12\7\2\0\1\7\6\0\1\7\26\0"+
    "\22\7\1\170\1\7\2\0\1\7\6\0\1\7\26\0"+
    "\3\7\1\171\20\7\2\0\1\7\6\0\1\7\26\0"+
    "\5\7\1\172\16\7\2\0\1\7\6\0\1\7\26\0"+
    "\5\7\1\173\16\7\2\0\1\7\6\0\1\7\26\0"+
    "\5\7\1\174\16\7\2\0\1\7\6\0\1\7\26\0"+
    "\14\7\1\175\7\7\2\0\1\7\6\0\1\7\26\0"+
    "\1\176\23\7\2\0\1\7\6\0\1\7\26\0\4\7"+
    "\1\177\17\7\2\0\1\7\6\0\1\7\26\0\2\7"+
    "\1\200\21\7\2\0\1\7\6\0\1\7\26\0\2\7"+
    "\1\201\21\7\2\0\1\7\6\0\1\7\26\0\11\7"+
    "\1\202\12\7\2\0\1\7\6\0\1\7\26\0\1\203"+
    "\23\7\2\0\1\7\6\0\1\7\26\0\4\7\1\204"+
    "\17\7\2\0\1\7\6\0\1\7\26\0\1\7\1\205"+
    "\22\7\2\0\1\7\6\0\1\7\26\0\5\7\1\206"+
    "\16\7\2\0\1\7\6\0\1\7\26\0\11\7\1\207"+
    "\12\7\2\0\1\7\6\0\1\7\26\0\1\210\23\7"+
    "\2\0\1\7\6\0\1\7\26\0\3\7\1\211\20\7"+
    "\2\0\1\7\6\0\1\7\26\0\21\7\1\212\2\7"+
    "\2\0\1\7\6\0\1\7\26\0\4\7\1\213\17\7"+
    "\2\0\1\7\6\0\1\7\26\0\5\7\1\214\16\7"+
    "\2\0\1\7\6\0\1\7\26\0\3\7\1\215\20\7"+
    "\2\0\1\7\6\0\1\7\26\0\1\7\1\216\22\7"+
    "\2\0\1\7\6\0\1\7\26\0\1\217\23\7\2\0"+
    "\1\7\6\0\1\7\26\0\3\7\1\220\20\7\2\0"+
    "\1\7\6\0\1\7\26\0\10\7\1\221\13\7\2\0"+
    "\1\7\6\0\1\7\26\0\10\7\1\222\13\7\2\0"+
    "\1\7\6\0\1\7\26\0\1\223\23\7\2\0\1\7"+
    "\6\0\1\7\26\0\11\7\1\224\12\7\2\0\1\7"+
    "\6\0\1\7\26\0\4\7\1\225\17\7\2\0\1\7"+
    "\6\0\1\7\26\0\15\7\1\226\6\7\2\0\1\7"+
    "\6\0\1\7\26\0\10\7\1\227\13\7\2\0\1\7"+
    "\6\0\1\7\26\0\11\7\1\230\12\7\2\0\1\7"+
    "\6\0\1\7\26\0\15\7\1\231\6\7\2\0\1\7"+
    "\6\0\1\7\26\0\1\7\1\232\22\7\2\0\1\7"+
    "\6\0\1\7\26\0\2\7\1\233\21\7\2\0\1\7"+
    "\6\0\1\7\26\0\1\234\23\7\2\0\1\7\6\0"+
    "\1\7\26\0\3\7\1\235\20\7\2\0\1\7\6\0"+
    "\1\7\26\0\4\7\1\236\17\7\2\0\1\7\6\0"+
    "\1\7\26\0\2\7\1\237\21\7\2\0\1\7\6\0"+
    "\1\7\26\0\1\240\23\7\2\0\1\7\6\0\1\7"+
    "\26\0\1\7\1\241\22\7\2\0\1\7\6\0\1\7"+
    "\26\0\5\7\1\242\16\7\2\0\1\7\6\0\1\7"+
    "\26\0\10\7\1\243\13\7\2\0\1\7\6\0\1\7"+
    "\26\0\2\7\1\244\21\7\2\0\1\7\6\0\1\7"+
    "\26\0\16\7\1\245\5\7\2\0\1\7\6\0\1\7"+
    "\26\0\1\7\1\246\22\7\2\0\1\7\6\0\1\7"+
    "\26\0\5\7\1\247\16\7\2\0\1\7\6\0\1\7"+
    "\26\0\2\7\1\250\21\7\2\0\1\7\6\0\1\7"+
    "\26\0\1\7\1\251\22\7\2\0\1\7\6\0\1\7"+
    "\26\0\3\7\1\252\20\7\2\0\1\7\6\0\1\7"+
    "\26\0\2\7\1\253\21\7\2\0\1\7\6\0\1\7"+
    "\26\0\11\7\1\254\12\7\2\0\1\7\6\0\1\7"+
    "\26\0\3\7\1\255\20\7\2\0\1\7\6\0\1\7"+
    "\26\0\13\7\1\256\10\7\2\0\1\7\6\0\1\7"+
    "\26\0\11\7\1\257\12\7\2\0\1\7\6\0\1\7"+
    "\26\0\4\7\1\260\17\7\2\0\1\7\6\0\1\7"+
    "\26\0\1\261\23\7\2\0\1\7\6\0\1\7\26\0"+
    "\4\7\1\262\17\7\2\0\1\7\6\0\1\7\26\0"+
    "\21\7\1\263\2\7\2\0\1\7\6\0\1\7\26\0"+
    "\10\7\1\264\13\7\2\0\1\7\6\0\1\7\26\0"+
    "\11\7\1\265\12\7\2\0\1\7\6\0\1\7\26\0"+
    "\1\266\23\7\2\0\1\7\6\0\1\7\26\0\4\7"+
    "\1\267\17\7\2\0\1\7\6\0\1\7\26\0\21\7"+
    "\1\270\2\7\2\0\1\7\6\0\1\7\26\0\1\271"+
    "\23\7\2\0\1\7\6\0\1\7\26\0\11\7\1\272"+
    "\12\7\2\0\1\7\6\0\1\7\26\0\1\273\23\7"+
    "\2\0\1\7\6\0\1\7\26\0\3\7\1\274\20\7"+
    "\2\0\1\7\6\0\1\7\26\0\4\7\1\275\17\7"+
    "\2\0\1\7\6\0\1\7\26\0\5\7\1\276\16\7"+
    "\2\0\1\7\6\0\1\7\26\0\3\7\1\277\20\7"+
    "\2\0\1\7\6\0\1\7\26\0\3\7\1\300\20\7"+
    "\2\0\1\7\6\0\1\7\26\0\3\7\1\301\20\7"+
    "\2\0\1\7\6\0\1\7\26\0\11\7\1\302\12\7"+
    "\2\0\1\7\6\0\1\7\26\0\3\7\1\303\20\7"+
    "\2\0\1\7\6\0\1\7\26\0\14\7\1\304\7\7"+
    "\2\0\1\7\6\0\1\7\26\0\15\7\1\305\6\7"+
    "\2\0\1\7\6\0\1\7\26\0\4\7\1\306\17\7"+
    "\2\0\1\7\6\0\1\7\26\0\3\7\1\307\20\7"+
    "\2\0\1\7\6\0\1\7\26\0\2\7\1\310\21\7"+
    "\2\0\1\7\6\0\1\7\26\0\4\7\1\311\17\7"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7696];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\2\1\1\11\3\1\3\11"+
    "\5\1\11\11\20\1\2\0\1\11\2\0\1\1\1\0"+
    "\10\11\27\1\1\11\1\0\31\1\1\11\132\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizaLex(java.io.Reader in) {
      yyline = 0;
    yychar = 0;
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico: " + yytext() + " | Fila:" + yyline + " | Columna: " + yycolumn);
            } 
            // fall through
          case 63: break;
          case 2: 
            { System.out.println("ENTERO");  
                    return new Symbol(sym.ENTERO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 64: break;
          case 3: 
            { /* Blank */
            } 
            // fall through
          case 65: break;
          case 4: 
            { System.out.println("ID");  
                    return new Symbol(sym.ID, yycolumn, yyline, yytext());
            } 
            // fall through
          case 66: break;
          case 5: 
            { System.out.println("div");  
                    return new Symbol(sym.div, yycolumn, yyline, yytext());
            } 
            // fall through
          case 67: break;
          case 6: 
            { System.out.println("times");  
                    return new Symbol(sym.times, yycolumn, yyline, yytext());
            } 
            // fall through
          case 68: break;
          case 7: 
            { System.out.println("greater");  
                    return new Symbol(sym.greater, yycolumn, yyline, yytext());
            } 
            // fall through
          case 69: break;
          case 8: 
            { System.out.println("equals");  
                    return new Symbol(sym.equals, yycolumn, yyline, yytext());
            } 
            // fall through
          case 70: break;
          case 9: 
            { System.out.println("lesser");  
                    return new Symbol(sym.lesser, yycolumn, yyline, yytext());
            } 
            // fall through
          case 71: break;
          case 10: 
            { System.out.println("coma");  
                    return new Symbol(sym.coma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 72: break;
          case 11: 
            { System.out.println("brack_close");  
                    return new Symbol(sym.brack_close, yycolumn, yyline, yytext());
            } 
            // fall through
          case 73: break;
          case 12: 
            { System.out.println("prd_cma");  
                    return new Symbol(sym.prd_cma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 74: break;
          case 13: 
            { System.out.println("plus");  
                    return new Symbol(sym.plus, yycolumn, yyline, yytext());
            } 
            // fall through
          case 75: break;
          case 14: 
            { System.out.println("minus");  
                    return new Symbol(sym.minus, yycolumn, yyline, yytext());
            } 
            // fall through
          case 76: break;
          case 15: 
            { System.out.println("notsign");  
                    return new Symbol(sym.notsign, yycolumn, yyline, yytext());
            } 
            // fall through
          case 77: break;
          case 16: 
            { System.out.println("coropen");  
                    return new Symbol(sym.coropen, yycolumn, yyline, yytext());
            } 
            // fall through
          case 78: break;
          case 17: 
            { System.out.println("corclose");  
                    return new Symbol(sym.corclose, yycolumn, yyline, yytext());
            } 
            // fall through
          case 79: break;
          case 18: 
            { System.out.println("doublepoint");  
                    return new Symbol(sym.doublepoint, yycolumn, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 19: 
            { System.out.println("power");  
                    return new Symbol(sym.power, yycolumn, yyline, yytext());
            } 
            // fall through
          case 81: break;
          case 20: 
            { System.out.println("question");  
                    return new Symbol(sym.question, yycolumn, yyline, yytext());
            } 
            // fall through
          case 82: break;
          case 21: 
            { System.out.println("mod");  
                    return new Symbol(sym.mod, yycolumn, yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 22: 
            { System.out.println("open_par");
                    return new Symbol(sym.open_par, yycolumn, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 23: 
            { System.out.println("closed_par");  
                    return new Symbol(sym.closed_par, yycolumn, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 24: 
            { System.out.println("brack_open");  
                    return new Symbol(sym.brack_open, yycolumn, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 25: 
            { System.out.println("CADENA");  
                    return new Symbol(sym.CADENA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 26: 
            { 
            } 
            // fall through
          case 88: break;
          case 27: 
            { System.out.println("greaterequals");  
                    return new Symbol(sym.greaterequals, yycolumn, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 28: 
            { System.out.println("equalsequals");  
                    return new Symbol(sym.equalsequals, yycolumn, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 29: 
            { System.out.println("lesserequals");  
                    return new Symbol(sym.lesserequals, yycolumn, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 30: 
            { System.out.println("masmas");  
                    return new Symbol(sym.masmas, yycolumn, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 31: 
            { System.out.println("menosmenos");  
                    return new Symbol(sym.menosmenos, yycolumn, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 32: 
            { System.out.println("diff");  
                    return new Symbol(sym.diff, yycolumn, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 33: 
            { System.out.println("andsign");  
                    return new Symbol(sym.andsign, yycolumn, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 34: 
            { System.out.println("orsign");  
                    return new Symbol(sym.orsign, yycolumn, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 35: 
            { System.out.println("res_SI");  
                    return new Symbol(sym.res_SI, yycolumn, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 36: 
            { System.out.println("DECIMALES");   
                    return new Symbol(sym.DECIMALES, yycolumn, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 37: 
            { System.out.println("CHARR");  
                    return new Symbol(sym.CHARR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 38: 
            { System.out.println("res_VOID");  
                    return new Symbol(sym.res_VOID, yycolumn, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 39: 
            { System.out.println("res_SINO");  
                    return new Symbol(sym.res_SINO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 40: 
            { System.out.println("res_CASO");  
                    return new Symbol(sym.res_CASO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 41: 
            { System.out.println("res_PARA");  
                    return new Symbol(sym.res_PARA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 42: 
            { System.out.println("res_NUEVO");
                    return new Symbol(sym.res_NUEVO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 43: 
            { System.out.println("res_DOBLE");  
                    return new Symbol(sym.res_DOBLE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 44: 
            { System.out.println("res_FALSO");  
                    return new Symbol(sym.res_FALSO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 106: break;
          case 45: 
            { System.out.println("res_HACER");  
                    return new Symbol(sym.res_HACER, yycolumn, yyline, yytext());
            } 
            // fall through
          case 107: break;
          case 46: 
            { System.out.println("res_ENTERO");  
                    return new Symbol(sym.res_ENTERO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 108: break;
          case 47: 
            { System.out.println("res_TIPODE");   
                    return new Symbol(sym.res_TIPODE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 109: break;
          case 48: 
            { System.out.println("res_CORTAR");  
                    return new Symbol(sym.res_CORTAR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 110: break;
          case 49: 
            { System.out.println("res_CADENA");  
                    return new Symbol(sym.res_CADENA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 50: 
            { System.out.println("res_RETORNO");  
                    return new Symbol(sym.res_RETORNO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 112: break;
          case 51: 
            { System.out.println("res_BINARIO");  
                    return new Symbol(sym.res_BINARIO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 113: break;
          case 52: 
            { System.out.println("res_ACADENA");  
                    return new Symbol(sym.res_ACADENA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 114: break;
          case 53: 
            { System.out.println("res_EJECUTAR"); 
                    return new Symbol(sym.res_EJECUTAR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 115: break;
          case 54: 
            { System.out.println("res_REDONDEO");  
                    return new Symbol(sym.res_REDONDEO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 55: 
            { System.out.println("res_LONGITUD");  
                    return new Symbol(sym.res_LONGITUD, yycolumn, yyline, yytext());
            } 
            // fall through
          case 117: break;
          case 56: 
            { System.out.println("res_IMPRIMIR");  
                    return new Symbol(sym.res_IMPRIMIR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 57: 
            { System.out.println("res_SELECTOR");  
                    return new Symbol(sym.res_SELECTOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 58: 
            { System.out.println("res_CARACTER");  
                    return new Symbol(sym.res_CARACTER, yycolumn, yyline, yytext());
            } 
            // fall through
          case 120: break;
          case 59: 
            { System.out.println("res_MIENTRAS");  
                    return new Symbol(sym.res_MIENTRAS, yycolumn, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 60: 
            { System.out.println("res_VERDADERO");  
                    return new Symbol(sym.res_VERDADERO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 122: break;
          case 61: 
            { System.out.println("res_CONTINUAR");  
                    return new Symbol(sym.res_CONTINUAR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 62: 
            { System.out.println("res_PORDEFECTO");  
                    return new Symbol(sym.res_PORDEFECTO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 124: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
